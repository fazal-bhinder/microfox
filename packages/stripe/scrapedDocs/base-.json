{
  "url": "https://docs.stripe.com/api",
  "content": "Introduction\nIntroduction\nAuthentication\nConnected Accounts\nErrors\nExpanding Responses\nIdempotent requests\nMetadata\nPagination\nRequest IDs\nVersioning\nBalance\nBalance Transactions\nCharges\nCustomers\nCustomer Session\nDisputes\nEvents\nEvents\nEvent Destinations\nFiles\nFile Links\nFX Quotes\nMandates\nPayment Intents\nSetup Intents\nSetup Attempts\nPayouts\nRefunds\nConfirmation Token\nTokens\nPayment Methods\nPayment Method Configurations\nPayment Method Domains\nBank Accounts\nCash Balance\nCash Balance Transaction\nCards\nSources\nProducts\nPrices\nCoupons\nPromotion Code\nDiscounts\nTax Code\nTax Rate\nShipping Rates\nCheckout Sessions\nPayment Link\nCredit Note\nCustomer Balance Transaction\nCustomer Portal Session\nCustomer Portal Configuration\nInvoices\nInvoice Items\nInvoice Line Item\nInvoice Payment\nInvoice Rendering Templates\nAlerts\nMeters\nMeter Events\nMeter Events\nMeter Event Adjustment\nMeter Event Adjustments\nMeter Event Streams\nMeter Event Summary\nCredit Grant\nCredit Balance Summary\nCredit Balance Transaction\nPlans\nQuote\nSubscriptions\nSubscription Items\nSubscription Schedule\nTax IDs\nTest Clocks\nFinancing Offer\nFinancing Summary\nAccounts\nLogin Links\nAccount Links\nAccount Session\nApplication Fees\nApplication Fee Refunds\nCapabilities\nCountry Specs\nExternal Bank Accounts\nExternal Account Cards\nPerson\nTop-ups\nTransfers\nTransfer Reversals\nSecrets\nEarly Fraud Warning\nReviews\nValue Lists\nValue List Items\nAuthorizations\nCardholders\nCards\nDisputes\nFunding Instructions\nPersonalization Designs\nPhysical Bundles\nTokens\nTransactions\nConnection Token\nLocation\nReader\nTerminal Hardware Order\nTerminal Hardware Product\nTerminal Hardware SKU\nTerminal Hardware Shipping Method\nConfiguration\nFinancial Accounts\nFinancial Account Features\nTransactions\nTransaction Entries\nOutbound Transfers\nOutbound Payments\nInbound Transfers\nReceived Credits\nReceived Debits\nCredit Reversals\nDebit Reversals\nFeature\nProduct Feature\nActive Entitlement\nScheduled Queries\nReport Runs\nReport Types\nAccounts\nAccount Owner\nSession\nTransactions\nTax Calculations\nTax Registrations\nTax Transactions\nTax Settings\nVerification Session\nVerification Report\nCrypto Onramp Session\nCrypto Onramp Quotes\nClimate Order\nClimate Product\nClimate Supplier\nForwarding Request\nWebhook Endpoints\nSign in →\nAPI Reference \n\nThe Stripe API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.\n\nYou can use the Stripe API in test mode, which doesn’t affect your live data or interact with the banking networks. The API key you use to authenticate the request determines whether the request is live mode or test mode.\n\nThe Stripe API doesn’t support bulk updates. You can work on only one object per request.\n\nThe Stripe API differs for every account as we release new versions and tailor functionality. Log in to see docs with your test key and data.\n\nJust getting started?\n\nCheck out our development quickstart guide.\n\nNot a developer?\n\nUse Stripe’s no-code options or apps from our partners to get started with Stripe and to do more with your Stripe account—no code required.\n\nBase URL\nhttps://api.stripe.com\nClient Libraries\nRuby\nPython\nPHP\nJava\nNode.js\nGo\n.NET\n\nBy default, the Stripe API Docs demonstrate using curl to interact with the API over HTTP. Select one of our official client libraries to see examples in code.\n\nAuthentication \n\nThe Stripe API uses API keys to authenticate requests. You can view and manage your API keys in the Stripe Dashboard.\n\nTest mode secret keys have the prefix sk_test_ and live mode secret keys have the prefix sk_live_. Alternatively, you can use restricted API keys for granular permissions.\n\nYour API keys carry many privileges, so be sure to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, client-side code, and so forth.\n\nAll API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.\n\nAuthenticated Request\nServer-side language\ncURL\nStripe CLI\nRuby\nPython\nPHP\nJava\nNode.js\nGo\n.NET\ncurl https://api.stripe.com/v1/charges \\\n  -u sk_test_BQokikJ...2HlWgH4olfQ2sk_test_BQokikJOvBiI2HlWgH4olfQ2:\n# The colon prevents curl from asking for a password.\nYour API Key\n\nA sample test API key is included in all the examples here, so you can test any example right away. Do not submit any personally identifiable information in requests made with this key.\n\nTo test requests using your account, replace the sample API key with your actual API key or sign in.\n\nConnected Accounts \n\nTo act as connected accounts, clients can issue requests using the Stripe-Account special header. Make sure that this header contains a Stripe account ID, which usually starts with the acct_ prefix.\n\nThe value is set per-request as shown in the adjacent code sample. Methods on the returned object reuse the same account ID.\n\nRelated guide: Making API calls for connected accounts\nErrors \n\nStripe uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the 2xx range indicate success. Codes in the 4xx range indicate an error that failed given the information provided (e.g., a required parameter was omitted, a charge failed, etc.). Codes in the 5xx range indicate an error with Stripe’s servers (these are rare).\n\nSome 4xx errors that could be handled programmatically (e.g., a card is declined) include an error code that briefly explains the error reported.\n\nAttributes\ncodenullable string\n\nFor some errors that could be handled programmatically, a short string indicating the error code reported.\n\ndecline_codenullable string\n\nFor card errors resulting from a card issuer decline, a short string indicating the card issuer’s reason for the decline if they provide one.\n\nmessagenullable string\n\nA human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n\nparamnullable string\n\nIf the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.\n\npayment_intentnullable object\n\nThe PaymentIntent object for errors returned on a request involving a PaymentIntent.\n\ntypeenum\n\nThe type of error returned. One of api_error, card_error, idempotency_error, or invalid_request_error\n\nPossible enum values\napi_error\n\n\ncard_error\n\n\nidempotency_error\n\n\ninvalid_request_error\nMore\nExpand all\nadvice_codenullable string\nchargenullable string\ndoc_urlnullable string\nnetwork_advice_codenullable string\nnetwork_decline_codenullable string\npayment_methodnullable object\npayment_method_typenullable string\nrequest_log_urlnullable string\nsetup_intentnullable object\nsourcenullable object\nHandling errors \n\nOur Client libraries raise exceptions for many reasons, such as a failed charge, invalid parameters, authentication errors, and network unavailability. We recommend writing code that gracefully handles all possible API exceptions.\n\nRelated guide: Error Handling\nExpanding Responses \n\nMany objects allow you to request additional information as an expanded response by using the expand request parameter. This parameter is available on all API requests, and applies to the response of that request only. You can expand responses in two ways.\n\nIn many cases, an object contains the ID of a related object in its response properties. For example, a Charge might have an associated Customer ID. You can expand these objects in line with the expand request parameter. The expandable label in this documentation indicates ID fields that you can expand into objects.\n\nSome available fields aren’t included in the responses by default, such as the number and cvc fields for the Issuing Card object. You can request these fields as an expanded response by using the expand request parameter.\n\nYou can expand recursively by specifying nested fields after a dot (.). For example, requesting payment_intent.customer on a charge expands the payment_intent property into a full Customer object, then expands the customer property on that payment intent into a full Customer object.\n\nYou can use the expand parameter on any endpoint that returns expandable fields, including list, create, and update endpoints.\n\nExpansions on list requests start with the data property. For example, you can expand data.customers on a request to list charges and associated customers. Performing deep expansions on numerous list requests might result in slower processing times.\n\nExpansions have a maximum depth of four levels (for example, the deepest expansion allowed when listing charges is data.payment_intent.customer.default_source).\n\nYou can expand multiple objects at the same time by identifying multiple items in the expand array.\n\nRelated guide: Expanding responses\nRelated video: Expand\nIdempotent requests \n\nThe API supports idempotency for safely retrying requests without accidentally performing the same operation twice. When creating or updating an object, use an idempotency key. Then, if a connection error occurs, you can safely repeat the request without risk of creating a second object or performing the update twice.\n\nTo perform an idempotent request, provide an additional IdempotencyKey element to the request options.\n\nStripe’s idempotency works by saving the resulting status code and body of the first request made for any given idempotency key, regardless of whether it succeeds or fails. Subsequent requests with the same key return the same result, including 500 errors.\n\nA client generates an idempotency key, which is a unique key that the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions. Idempotency keys are up to 255 characters long.\n\nYou can remove keys from the system automatically after they’re at least 24 hours old. We generate a new request if a key is reused after the original is pruned. The idempotency layer compares incoming parameters to those of the original request and errors if they’re not the same to prevent accidental misuse.\n\nWe save results only after the execution of an endpoint begins. If incoming parameters fail validation, or the request conflicts with another request that’s executing concurrently, we don’t save the idempotent result because no API endpoint initiates the execution. You can retry these requests. Learn more about when you can retry idempotent requests.\n\nAll POST requests accept idempotency keys. Don’t send idempotency keys in GET and DELETE requests because it has no effect. These requests are idempotent by definition.\n\nMetadata \n\nUpdateable Stripe objects—including Account, Charge, Customer, PaymentIntent, Refund, Subscription, and Transfer have a metadata parameter. You can use this parameter to attach key-value data to these Stripe objects.\n\nYou can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Keys and values are stored as strings and can contain any characters with one exception: you can’t use square brackets ([ and ]) in keys.\n\nYou can use metadata to store additional, structured information on an object. For example, you could store your user’s full name and corresponding unique identifier from your system on a Stripe Customer object. Stripe doesn’t use metadata—for example, we don’t use it to authorize or decline a charge and it won’t be seen by your users unless you choose to show it to them.\n\nSome of the objects listed above also support a description parameter. You can use the description parameter to annotate a charge-for example, a human-readable description such as 2 shirts for test@example.com. Unlike metadata, description is a single string, which your users might see (for example, in email receipts Stripe sends on your behalf).\n\nDon’t store any sensitive information (bank account numbers, card details, and so on) as metadata or in the description parameter.\n\nRelated guide: Metadata\nSample metadata use cases\nLink IDs: Attach your system’s unique IDs to a Stripe object to simplify lookups. For example, add your order number to a charge, your user ID to a customer or recipient, or a unique receipt number to a transfer.\nRefund papertrails: Store information about the reason for a refund and the individual responsible for its creation.\nCustomer details: Annotate a customer by storing an internal ID for your future use.\nPagination \n\nAll top-level API resources have support for bulk fetches through “list” API methods. For example, you can list charges, list customers, and list invoices. These list API methods share a common structure and accept, at a minimum, the following three parameters: limit, starting_after, and ending_before.\n\nStripe’s list API methods use cursor-based pagination through the starting_after and ending_before parameters. Both parameters accept an existing object ID value (see below) and return objects in reverse chronological order. The ending_before parameter returns objects listed before the named object. The starting_after parameter returns objects listed after the named object. These parameters are mutually exclusive. You can use either the starting_after or ending_before parameter, but not both simultaneously.\n\nOur client libraries offer auto-pagination helpers to traverse all pages of a list.\n\nParameters\nlimitoptional, default is 10\n\nThis specifies a limit on the number of objects to return, ranging between 1 and 100.\n\nstarting_afteroptional object ID\n\nA cursor to use in pagination. starting_after is an object ID that defines your place in the list. For example, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo to fetch the next page of the list.\n\nending_beforeoptional object ID\n\nA cursor to use in pagination. ending_before is an object ID that defines your place in the list. For example, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar to fetch the previous page of the list.\n\nList Response Format\nobjectstring, value is \"list\"\n\nA string that provides a description of the object type that returns.\n\ndataarray\n\nAn array containing the actual response elements, paginated by any request parameters.\n\nhas_moreboolean\n\nWhether or not there are more elements available after this set. If false, this set comprises the end of the list.\n\nurlurl\n\nThe URL for accessing this list.\n\nSearch \n\nSome top-level API resource have support for retrieval via “search” API methods. For example, you can search charges, search customers, and search subscriptions.\n\nStripe’s search API methods utilize cursor-based pagination via the page request parameter and next_page response parameter. For example, if you make a search request and receive \"next_page\": \"pagination_key\" in the response, your subsequent call can include page=pagination_key to fetch the next page of results.\n\nOur client libraries offer auto-pagination helpers to easily traverse all pages of a search result.\n\nSearch request format\nqueryrequired\n\nThe search query string. See search query language.\n\nlimitoptional\n\nA limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.\n\npageoptional\n\nA cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.\n\nSearch response format\nobjectstring, value is \"search_result\"\n\nA string describing the object type returned.\n\nurlstring\n\nThe URL for accessing this list.\n\nhas_moreboolean\n\nWhether or not there are more elements available after this set. If false, this set comprises the end of the list.\n\ndataarray\n\nAn array containing the actual response elements, paginated by any request parameters.\n\nnext_pagestring\n\nA cursor for use in pagination. If has_more is true, you can pass the value of next_page to a subsequent call to fetch the next page of results.\n\ntotal_countoptional positive integer or zero\n\nThe total number of objects that match the query, only accurate up to 10,000. This field isn’t included by default. To include it in the response, expand the total_count field.\n\nAuto-pagination \n\nOur libraries support auto-pagination. This feature allows you to easily iterate through large lists of resources without having to manually perform the requests to fetch subsequent pages.\n\nRequest IDs \n\nEach API request has an associated request identifier. You can find this value in the response headers, under Request-Id. You can also find request identifiers in the URLs of individual request logs in your Dashboard.\n\nTo expedite the resolution process, provide the request identifier when you contact us about a specific request.\n\nVersioning \n\nEach major release, such as Acacia, includes changes that aren’t backward-compatible with previous releases. Upgrading to a new major release can require updates to existing code. Each monthly release includes only backward-compatible changes, and uses the same name as the last major release. You can safely upgrade to a new monthly release without breaking any existing code. The current version is 2025-04-30.basil. For information on all API versions, view our API changelog.\n\nYou can upgrade your API version in Workbench. As a precaution, use API versioning to test a new API version before committing to an upgrade.\n\nBalance \n\nThis is an object representing your Stripe balance. You can retrieve it to see the balance currently on your Stripe account.\n\nYou can also retrieve the balance history, which contains a list of transactions that contributed to the balance (charges, payouts, and so forth).\n\nThe available and pending amounts for each currency are broken down further by payment source types.\n\nRelated guide: Understanding Connect account balances\n\nShow\n\nBalance Transactions \n\nBalance transactions represent funds moving through your Stripe account. Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.\n\nRelated guide: Balance transaction types\n\nShow\n\nCharges \n\nThe Charge object represents a single attempt to move money into your Stripe account. PaymentIntent confirmation is the most common way to create Charges, but transferring money to a different Stripe account through Connect also creates Charges. Some legacy payment flows create Charges directly, which is not recommended for new integrations.\n\nShow\n\nCustomers \n\nThis object represents a customer of your business. Use it to create recurring charges, save payment and contact information, and track payments that belong to the same customer.\n\nShow\n\nCustomer Session \n\nA Customer Session allows you to grant Stripe’s frontend SDKs (like Stripe.js) client-side access control over a Customer.\n\nRelated guides: Customer Session with the Payment Element, Customer Session with the Pricing Table, Customer Session with the Buy Button.\n\nShow\n\nDisputes \n\nA dispute occurs when a customer questions your charge with their card issuer. When this happens, you have the opportunity to respond to the dispute with evidence that shows that the charge is legitimate.\n\nRelated guide: Disputes and fraud\n\nShow\n\nEvents \n\nEvents are our way of letting you know when something interesting happens in your account. When an interesting event occurs, we create a new Event object. For example, when a charge succeeds, we create a charge.succeeded event, and when an invoice payment attempt fails, we create an invoice.payment_failed event. Certain API requests might create multiple events. For example, if you create a new subscription for a customer, you receive both a customer.subscription.created event and a charge.succeeded event.\n\nEvents occur when the state of another API resource changes. The event’s data field embeds the resource’s state at the time of the change. For example, a charge.succeeded event contains a charge, and an invoice.payment_failed event contains an invoice.\n\nAs with other API resources, you can use endpoints to retrieve an individual event or a list of events from the API. We also have a separate webhooks system for sending the Event objects directly to an endpoint on your server. You can manage webhooks in your account settings. Learn how to listen for events so that your integration can automatically trigger reactions.\n\nWhen using Connect, you can also receive event notifications that occur in connected accounts. For these events, there’s an additional account attribute in the received Event object.\n\nWe only guarantee access to events through the Retrieve Event API for 30 days.\n\nShow\n\nEvents v2\nLearn more about calling API v2 endpoints. \n\nEvents are generated to keep you informed of activity in your business account. APIs in the /v2 namespace generate thin events which have small, unversioned payloads that include a reference to the ID of the object that has changed. The Events v2 API returns these new thin events. Retrieve the event object for additional data about the event. Use the related object ID in the event payload to fetch the API resource of the object associated with the event. Comparatively, events generated by most API v1 include a versioned snapshot of an API object in their payload.\n\nShow\n\nEvent Destinations v2\nLearn more about calling API v2 endpoints. \n\nSet up an event destination to receive events from Stripe across multiple destination types, including webhook endpoints and Amazon EventBridge. Event destinations support receiving thin events and snapshot events.\n\nShow\n\nFiles \n\nThis object represents files hosted on Stripe’s servers. You can upload files with the create file request (for example, when uploading dispute evidence). Stripe also creates files independently (for example, the results of a Sigma scheduled query).\n\nRelated guide: File upload guide\n\nShow\n\nFile Links \n\nTo share the contents of a File object with non-Stripe users, you can create a FileLink. FileLinks contain a URL that you can use to retrieve the contents of the file without authentication.\n\nShow\n\nFX Quotes \n\nThe FX Quotes API provides three key functions:\n\nView current exchange rates: The object shows Stripe’s current exchange rate for any given currency pair.\nExtended quotes: The API provides rate quotes valid for a 1-hour period or a 24-hour period, eliminating uncertainty from FX fluctuations.\nView FX fees: The API provides information on the FX fees Stripe will charge on your FX transaction, allowing you to anticipate specific settlement amounts before payment costs.\n\nShow\n\nMandates \n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\nShow\n\nPayment Intents \n\nA PaymentIntent guides you through the process of collecting a payment from your customer. We recommend that you create exactly one PaymentIntent for each order or customer session in your system. You can reference the PaymentIntent later to see the history of payment attempts for a particular session.\n\nA PaymentIntent transitions through multiple statuses throughout its lifetime as it interfaces with Stripe.js to perform authentication flows and ultimately creates at most one successful charge.\n\nRelated guide: Payment Intents API\n\nShow\n\nSetup Intents \n\nA SetupIntent guides you through the process of setting up and saving a customer’s payment credentials for future payments. For example, you can use a SetupIntent to set up and save your customer’s card without immediately collecting a payment. Later, you can use PaymentIntents to drive the payment flow.\n\nCreate a SetupIntent when you’re ready to collect your customer’s payment credentials. Don’t maintain long-lived, unconfirmed SetupIntents because they might not be valid. The SetupIntent transitions through multiple statuses as it guides you through the setup process.\n\nSuccessful SetupIntents result in payment credentials that are optimized for future payments. For example, cardholders in certain regions might need to be run through Strong Customer Authentication during payment method collection to streamline later off-session payments. If you use the SetupIntent with a Customer, it automatically attaches the resulting payment method to that Customer after successful setup. We recommend using SetupIntents or setup_future_usage on PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.\n\nBy using SetupIntents, you can reduce friction for your customers, even as regulations change over time.\n\nRelated guide: Setup Intents API\n\nShow\n\nSetup Attempts \n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\nShow\n\nPayouts \n\nA Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account. You can retrieve individual payouts, and list all payouts. Payouts are made on varying schedules, depending on your country and industry.\n\nRelated guide: Receiving payouts\n\nShow\n\nRefunds \n\nRefund objects allow you to refund a previously created charge that isn’t refunded yet. Funds are refunded to the credit or debit card that’s initially charged.\n\nRelated guide: Refunds\n\nShow\n\nConfirmation Token \n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\nFinalize payments on the server\nBuild two-step confirmation.\n\nShow\n\nTokens \n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our recommended payments integrations to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create Customer objects or External accounts. Radar, our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nShow\n\nPayment Methods \n\nPaymentMethod objects represent your customer’s payment instruments. You can use them with PaymentIntents to collect payments or save them to Customer objects to store instrument details for future payments.\n\nRelated guides: Payment Methods and More Payment Scenarios.\n\nShow\n\nPayment Method Configurations \n\nPaymentMethodConfigurations control which payment methods are displayed to your customers when you don’t explicitly specify payment method types. You can have multiple configurations with different sets of payment methods for different scenarios.\n\nThere are two types of PaymentMethodConfigurations. Which is used depends on the charge type:\n\nDirect configurations apply to payments created on your account, including Connect destination charges, Connect separate charges and transfers, and payments not involving Connect.\n\nChild configurations apply to payments created on your connected accounts using direct charges, and charges with the on_behalf_of parameter.\n\nChild configurations have a parent that sets default values and controls which settings connected accounts may override. You can specify a parent ID at payment time, and Stripe will automatically resolve the connected account’s associated child configuration. Parent configurations are managed in the dashboard and are not available in this API.\n\nRelated guides:\n\nPayment Method Configurations API\nMultiple configurations on dynamic payment methods\nMultiple configurations for your Connect accounts\n\nShow\n\nPayment Method Domains \n\nA payment method domain represents a web domain that you have registered with Stripe. Stripe Elements use registered payment method domains to control where certain payment methods are shown.\n\nRelated guide: Payment method domains.\n\nShow\n\nBank Accounts \n\nThese bank accounts are payment methods on Customer objects.\n\nOn the other hand External Accounts are transfer destinations on Account objects for connected accounts. They can be bank accounts or debit cards as well, and are documented in the links above.\n\nRelated guide: Bank debits and transfers\n\nShow\n\nCash Balance \n\nA customer’s Cash balance represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\nShow\n\nCash Balance Transaction \n\nCustomers with certain payments enabled have a cash balance, representing funds that were paid by the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions represent when funds are moved into or out of this balance. This includes funding by the customer, allocation to payments, and refunds to the customer.\n\nShow\n\nCards \n\nYou can store multiple cards on a customer in order to charge the customer later. You can also store multiple debit cards on a recipient in order to transfer to those cards later.\n\nRelated guide: Card payments with Sources\n\nShow\n\nSources Deprecated\n\nSource objects allow you to accept a variety of payment methods. They represent a customer’s payment instrument, and can be used with the Stripe API just like a Card object: once chargeable, they can be charged, or can be attached to customers.\n\nStripe doesn’t recommend using the deprecated Sources API. We recommend that you adopt the PaymentMethods API. This newer API provides access to our latest features and payment method types.\n\nRelated guides: Sources API and Sources & Customers.\n\nShow\n\nProducts \n\nProducts describe the specific goods or services you offer to your customers. For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product. They can be used in conjunction with Prices to configure pricing in Payment Links, Checkout, and Subscriptions.\n\nRelated guides: Set up a subscription, share a Payment Link, accept payments with Checkout, and more about Products and Prices\n\nShow\n\nPrices \n\nPrices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products. Products help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has prices for $10/month, $100/year, and €9 once.\n\nRelated guides: Set up a subscription, create an invoice, and more about products and prices.\n\nShow\n\nCoupons \n\nA coupon contains information about a percent-off or amount-off discount you might want to apply to a customer. Coupons may be applied to subscriptions, invoices, checkout sessions, quotes, and more. Coupons do not work with conventional one-off charges or payment intents.\n\nShow\n\nPromotion Code \n\nA Promotion Code represents a customer-redeemable code for a coupon. It can be used to create multiple codes for a single coupon.\n\nShow\n\nDiscounts \n\nA discount represents the actual application of a coupon or promotion code. It contains information about when the discount began, when it will end, and what it is applied to.\n\nRelated guide: Applying discounts to subscriptions\n\nShow\n\nTax Code \n\nTax codes classify goods and services for tax purposes.\n\nShow\n\nTax Rate \n\nTax rates can be applied to invoices, subscriptions and Checkout Sessions to collect tax.\n\nRelated guide: Tax rates\n\nShow\n\nShipping Rates \n\nShipping rates describe the price of shipping presented to your customers and applied to a purchase. For more information, see Charge for shipping.\n\nShow\n\nCheckout Sessions \n\nA Checkout Session represents your customer’s session as they pay for one-time purchases or subscriptions through Checkout or Payment Links. We recommend creating a new Session each time your customer attempts to pay.\n\nOnce payment is successful, the Checkout Session will contain a reference to the Customer, and either the successful PaymentIntent or an active Subscription.\n\nYou can create a Checkout Session on your server and redirect to its URL to begin Checkout.\n\nRelated guide: Checkout quickstart\n\nShow\n\nPayment Link \n\nA payment link is a shareable URL that will take your customers to a hosted payment page. A payment link can be shared and used multiple times.\n\nWhen a customer opens a payment link it will open a new checkout session to render the payment page. You can use checkout session events to track payments through payment links.\n\nRelated guide: Payment Links API\n\nShow\n\nCredit Note \n\nIssue a credit note to adjust an invoice’s amount after the invoice is finalized.\n\nRelated guide: Credit notes\n\nShow\n\nCustomer Balance Transaction \n\nEach customer has a Balance value, which denotes a debit or credit that’s automatically applied to their next invoice upon finalization. You may modify the value directly by using the update customer API, or by creating a Customer Balance Transaction, which increments or decrements the customer’s balance by the specified amount.\n\nRelated guide: Customer balance\n\nShow\n\nCustomer Portal Session \n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: Customer management\n\nShow\n\nCustomer Portal Configuration \n\nA portal configuration describes the functionality and behavior of a portal session.\n\nShow\n\nInvoices \n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain invoice items, and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, when automatic, does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your email settings, Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s minimum allowed charge per currency, the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are here.\n\nRelated guide: Send invoices to customers\n\nShow\n\nInvoice Items \n\nInvoice Items represent the component lines of an invoice. An invoice item is added to an invoice by creating or updating it with an invoice field, at which point it will be included as an invoice line item within invoice.lines.\n\nInvoice Items can be created before you are ready to actually send the invoice. This can be particularly useful when combined with a subscription. Sometimes you want to add a charge or credit to a customer, but actually charge or credit the customer’s card only at the end of a regular billing cycle. This is useful for combining several charges (to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.\n\nRelated guides: Integrate with the Invoicing API, Subscription Invoices.\n\nShow\n\nInvoice Line Item \n\nInvoice Line Items represent the individual lines within an invoice and only exist within the context of an invoice.\n\nEach line item is backed by either an invoice item or a subscription item.\n\nShow\n\nInvoice Payment \n\nThe invoice payment object\n\nShow\n\nInvoice Rendering Templates \n\nInvoice Rendering Templates are used to configure how invoices are rendered on surfaces like the PDF. Invoice Rendering Templates can be created from within the Dashboard, and they can be used over the API when creating invoices.\n\nShow\n\nAlerts \n\nA billing alert is a resource that notifies you when a certain usage threshold on a meter is crossed. For example, you might create a billing alert to notify you when a certain user made 100 API requests.\n\nShow\n\nMeters \n\nMeters specify how to aggregate meter events over a billing period. Meter events represent the actions that customers take in your system. Meters attach to prices and form the basis of the bill.\n\nRelated guide: Usage based billing\n\nShow\n\nMeter Events \n\nMeter events represent actions that customers take in your system. You can use meter events to bill a customer based on their usage. Meter events are associated with billing meters, which define both the contents of the event’s payload and how to aggregate those events.\n\nShow\n\nMeter Events v2\nLearn more about calling API v2 endpoints. \n\nMeter events are used to report customer usage of your product or service. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated. Meter events are processed asynchronously, so they may not be immediately reflected in aggregates or on upcoming invoices.\n\nShow\n\nMeter Event Adjustment \n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\nShow\n\nMeter Event Adjustments v2\nLearn more about calling API v2 endpoints. \n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\nShow\n\nMeter Event Streams v2\nLearn more about calling API v2 endpoints. \n\nYou can send a higher-throughput of meter events using meter event streams. For this flow, you must first create a meter event session, which will provide you with a session token. You can then create meter events through the meter event stream endpoint, using the session token for authentication. The session tokens are short-lived and you will need to create a new meter event session when the token expires.\n\nShow\n\nMeter Event Summary \n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\nNote: Meters events are aggregated asynchronously so the meter event summaries provide an eventually consistent view of the reported usage.\n\nShow\n\nCredit Grant \n\nA credit grant is an API resource that documents the allocation of some billing credits to a customer.\n\nRelated guide: Billing credits\n\nShow\n\nCredit Balance Summary \n\nIndicates the billing credit balance for billing credits granted to a customer.\n\nShow\n\nCredit Balance Transaction \n\nA credit balance transaction is a resource representing a transaction (either a credit or a debit) against an existing credit grant.\n\nShow\n\nPlans \n\nYou can now model subscriptions more flexibly using the Prices API. It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. Products help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: Set up a subscription and more about products and prices.\n\nShow\n\nQuote \n\nA Quote is a way to model prices that you’d like to provide to a customer. Once accepted, it will automatically create an invoice, subscription or subscription schedule.\n\nShow\n\nSubscriptions \n\nSubscriptions allow you to charge a customer on a recurring basis.\n\nRelated guide: Creating subscriptions\n\nShow\n\nSubscription Items \n\nSubscription items allow you to create customer subscriptions with more than one plan, making it easy to represent complex billing relationships.\n\nShow\n\nSubscription Schedule \n\nA subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.\n\nRelated guide: Subscription schedules\n\nShow\n\nTax IDs \n\nYou can add one or multiple tax IDs to a customer or account. Customer and account tax IDs get displayed on related invoices and credit notes.\n\nRelated guides: Customer tax identification numbers, Account tax IDs\n\nShow\n\nTest Clocks Test helper\n\nA test clock enables deterministic control over objects in testmode. With a test clock, you can create objects at a frozen time in the past or future, and advance to a specific future time to observe webhooks and state changes. After the clock advances, you can either validate the current state of your scenario (and test your assumptions), change the current state of your scenario (and test more complex scenarios), or keep advancing forward in time.\n\nShow\n\nFinancing Offer Preview\n\nThis is an object representing an offer of financing from Stripe Capital to a Connect subaccount.\n\nShow\n\nFinancing Summary Preview\n\nA financing object describes an account’s current financing state. Used by Connect platforms to read the state of Capital offered to their connected accounts.\n\nShow\n\nAccounts \n\nThis is an object representing a Stripe account. You can retrieve it to see properties on the account like its current requirements or if the account is enabled to make live charges or receive payouts.\n\nFor accounts where controller.requirement_collection is application, which includes Custom accounts, the properties below are always returned.\n\nFor accounts where controller.requirement_collection is stripe, which includes Standard and Express accounts, some properties are only returned until you create an Account Link or Account Session to start Connect Onboarding. Learn about the differences between accounts.\n\nShow\n\nLogin Links \n\nLogin Links are single-use URLs that takes an Express account to the login page for their Stripe dashboard. A Login Link differs from an Account Link in that it takes the user directly to their Express dashboard for the specified account\n\nShow\n\nAccount Links \n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: Connect Onboarding\n\nShow\n\nAccount Session \n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: Connect embedded components\n\nShow\n\nApplication Fees \n\nWhen you collect a transaction fee on top of a charge made for your user (using Connect), an Application Fee object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: Collecting application fees\n\nShow\n\nApplication Fee Refunds \n\nApplication Fee Refund objects allow you to refund an application fee that has previously been created but not yet refunded. Funds will be refunded to the Stripe account from which the fee was originally collected.\n\nRelated guide: Refunding application fees\n\nShow\n\nCapabilities \n\nThis is an object representing a capability for a Stripe account.\n\nRelated guide: Account capabilities\n\nShow\n\nCountry Specs \n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as an online guide.\n\nShow\n\nExternal Bank Accounts \n\nExternal bank accounts are financial accounts associated with a Stripe platform’s connected accounts for the purpose of transferring funds to or from the connected account’s Stripe balance.\n\nShow\n\nExternal Account Cards \n\nExternal account cards are debit cards associated with a Stripe platform’s connected accounts for the purpose of transferring funds to or from the connected accounts Stripe balance.\n\nShow\n\nPerson \n\nThis is an object representing a person associated with a Stripe account.\n\nA platform can only access a subset of data in a person for an account where account.controller.requirement_collection is stripe, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.\n\nSee the Standard onboarding or Express onboarding documentation for information about prefilling information and account onboarding steps. Learn more about handling identity verification with the API.\n\nShow\n\nTop-ups \n\nTo top up your Stripe balance, you create a top-up object. You can retrieve individual top-ups, as well as list all top-ups. Top-ups are identified by a unique, random ID.\n\nRelated guide: Topping up your platform account\n\nShow\n\nTransfers \n\nA Transfer object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a Payout object, with corresponding payout endpoints. For more information, read about the transfer/payout split.\n\nRelated guide: Creating separate charges and transfers\n\nShow\n\nTransfer Reversals \n\nStripe Connect platforms can reverse transfers made to a connected account, either entirely or partially, and can also specify whether to refund any related application fees. Transfer reversals add to the platform’s balance and subtract from the destination account’s balance.\n\nReversing a transfer that was made for a destination charge is allowed only up to the amount of the charge. It is possible to reverse a transfer_group transfer only if the destination account has enough balance to cover the reversal.\n\nRelated guide: Reverse transfers\n\nShow\n\nSecrets \n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a secret. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share account scoped secrets. Use the account scope for secrets that don’t change per-user, like a third-party API key.\n\nA user scoped secret is accessible by the app backend and one specific Dashboard user. Use the user scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: Store data between page reloads\n\nShow\n\nEarly Fraud Warning \n\nAn early fraud warning indicates that the card issuer has notified us that a charge may be fraudulent.\n\nRelated guide: Early fraud warnings\n\nShow\n\nReviews \n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about Radar and reviewing payments here.\n\nShow\n\nValue Lists \n\nValue lists allow you to group values together which can then be referenced in rules.\n\nRelated guide: Default Stripe lists\n\nShow\n\nValue List Items \n\nValue list items allow you to add specific values to a given Radar value list, which can then be used in rules.\n\nRelated guide: Managing list items\n\nShow\n\nAuthorizations \n\nWhen an issued card is used to make a purchase, an Issuing Authorization object is created. Authorizations must be approved for the purchase to be completed successfully.\n\nRelated guide: Issued card authorizations\n\nShow\n\nCardholders \n\nAn Issuing Cardholder object represents an individual or business entity who is issued cards.\n\nRelated guide: How to create a cardholder\n\nShow\n\nCards \n\nYou can create physical or virtual cards that are issued to cardholders.\n\nShow\n\nDisputes \n\nAs a card issuer, you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.\n\nRelated guide: Issuing disputes\n\nShow\n\nFunding Instructions \n\nFunding Instructions contain reusable bank account and routing information. Push funds to these addresses via bank transfer to top up Issuing Balances.\n\nShow\n\nPersonalization Designs \n\nA Personalization Design is a logical grouping of a Physical Bundle, card logo, and carrier text that represents a product line.\n\nShow\n\nPhysical Bundles \n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\nShow\n\nTokens Preview\n\nAn issuing token object is created when an issued card is added to a digital wallet. As a card issuer, you can view and manage these tokens through Stripe.\n\nShow\n\nTransactions \n\nAny use of an issued card that results in funds entering or leaving your Stripe account, such as a completed purchase or refund, is represented by an Issuing Transaction object.\n\nRelated guide: Issued card transactions\n\nShow\n\nConnection Token \n\nA Connection Token is used by the Stripe Terminal SDK to connect to a reader.\n\nRelated guide: Fleet management\n\nShow\n\nLocation \n\nA Location represents a grouping of readers.\n\nRelated guide: Fleet management\n\nShow\n\nReader \n\nA Reader represents a physical device for accepting payment details.\n\nRelated guide: Connecting to a reader\n\nShow\n\nTerminal Hardware Order Preview\n\nA TerminalHardwareOrder represents an order for Terminal hardware, containing information such as the price, shipping information and the items ordered.\n\nShow\n\nTerminal Hardware Product Preview\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\nShow\n\nTerminal Hardware SKU Preview\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\nShow\n\nTerminal Hardware Shipping Method Preview\n\nA TerminalHardwareShipping represents a Shipping Method for Terminal hardware. A Shipping Method is a country-specific representation of a way to ship hardware, containing information such as the country, name, and expected delivery date.\n\nShow\n\nConfiguration \n\nA Configurations object represents how features should be configured for terminal readers.\n\nShow\n\nFinancial Accounts \n\nStripe Treasury provides users with a container for money called a FinancialAccount that is separate from their Payments balance. FinancialAccounts serve as the source and destination of Treasury’s money movement APIs.\n\nShow\n\nFinancial Account Features \n\nEncodes whether a FinancialAccount has access to a particular Feature, with a status enum and associated status_details. Stripe or the platform can control Features via the requested field.\n\nShow\n\nTransactions \n\nTransactions represent changes to a FinancialAccount’s balance.\n\nShow\n\nTransaction Entries \n\nTransactionEntries represent individual units of money movements within a single Transaction.\n\nShow\n\nOutbound Transfers \n\nUse OutboundTransfers to transfer funds from a FinancialAccount to a PaymentMethod belonging to the same entity. To send funds to a different party, use OutboundPayments instead. You can send funds over ACH rails or through a domestic wire transfer to a user’s own external bank account.\n\nSimulate OutboundTransfer state changes with the /v1/test_helpers/treasury/outbound_transfers endpoints. These methods can only be called on test mode objects.\n\nRelated guide: Moving money with Treasury using OutboundTransfer objects\n\nShow\n\nOutbound Payments \n\nUse OutboundPayments to send funds to another party’s external bank account or FinancialAccount. To send money to an account belonging to the same user, use an OutboundTransfer.\n\nSimulate OutboundPayment state changes with the /v1/test_helpers/treasury/outbound_payments endpoints. These methods can only be called on test mode objects.\n\nRelated guide: Moving money with Treasury using OutboundPayment objects\n\nShow\n\nInbound Transfers \n\nUse InboundTransfers to add funds to your FinancialAccount via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.\n\nRelated guide: Moving money with Treasury using InboundTransfer objects\n\nShow\n\nReceived Credits \n\nReceivedCredits represent funds sent to a FinancialAccount (for example, via ACH or wire). These money movements are not initiated from the FinancialAccount.\n\nShow\n\nReceived Debits \n\nReceivedDebits represent funds pulled from a FinancialAccount. These are not initiated from the FinancialAccount.\n\nShow\n\nCredit Reversals \n\nYou can reverse some ReceivedCredits depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.\n\nShow\n\nDebit Reversals \n\nYou can reverse some ReceivedDebits depending on their network and source flow. Reversing a ReceivedDebit leads to the creation of a new object known as a DebitReversal.\n\nShow\n\nFeature \n\nA feature represents a monetizable ability or functionality in your system. Features can be assigned to products, and when those products are purchased, Stripe will create an entitlement to the feature for the purchasing customer.\n\nShow\n\nProduct Feature \n\nA product_feature represents an attachment between a feature and a product. When a product is purchased that has a feature attached, Stripe will create an entitlement to the feature for the purchasing customer.\n\nShow\n\nActive Entitlement \n\nAn active entitlement describes access to a feature for a customer.\n\nShow\n\nScheduled Queries \n\nIf you have scheduled a Sigma query, you’ll receive a sigma.scheduled_query_run.created webhook each time the query runs. The webhook contains a ScheduledQueryRun object, which you can use to retrieve the query results.\n\nShow\n\nReport Runs \n\nThe Report Run object represents an instance of a report type generated with specific run parameters. Once the object is created, Stripe begins processing the report. When the report has finished running, it will give you a reference to a file where you can retrieve your results. For an overview, see API Access to Reports.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a live-mode API key.\n\nShow\n\nReport Types \n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See API Access to Reports documentation for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a live-mode API key.\n\nShow\n\nAccounts \n\nA Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access.\n\nShow\n\nAccount Owner \n\nDescribes an owner of an account.\n\nShow\n\nSession \n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\nShow\n\nTransactions \n\nA Transaction represents a real transaction that affects a Financial Connections Account balance.\n\nShow\n\nTax Calculations \n\nA Tax Calculation allows you to calculate the tax to collect from your customer.\n\nRelated guide: Calculate tax in your custom payment flow\n\nShow\n\nTax Registrations \n\nA Tax Registration lets us know that your business is registered to collect tax on payments within a region, enabling you to automatically collect tax.\n\nStripe doesn’t register on your behalf with the relevant authorities when you create a Tax Registration object. For more information on how to register to collect tax, see our guide.\n\nRelated guide: Using the Registrations API\n\nShow\n\nTax Transactions \n\nA Tax Transaction records the tax collected from or refunded to your customer.\n\nRelated guide: Calculate tax in your custom payment flow\n\nShow\n\nTax Settings \n\nYou can use Tax Settings to manage configurations used by Stripe Tax calculations.\n\nRelated guide: Using the Settings API\n\nShow\n\nVerification Session \n\nA VerificationSession guides you through the process of collecting and verifying the identities of your users. It contains details about the type of verification, such as what verification check to perform. Only create one VerificationSession for each verification in your system.\n\nA VerificationSession transitions through multiple statuses throughout its lifetime as it progresses through the verification flow. The VerificationSession contains the user’s verified data after verification checks are complete.\n\nRelated guide: The Verification Sessions API\n\nShow\n\nVerification Report \n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the type and options parameters used. You can find the result of each verification check performed in the appropriate sub-resource: document, id_number, selfie.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the FileUpload API. To configure and create VerificationReports, use the VerificationSession API.\n\nRelated guide: Accessing verification results.\n\nShow\n\nCrypto Onramp Session \n\nA Crypto Onramp Session represents your customer’s session as they purchase cryptocurrency through Stripe. Once payment is successful, Stripe will fulfill the delivery of cryptocurrency to your user’s wallet and contain a reference to the crypto transaction ID.\n\nYou can create an onramp session on your server and embed the widget on your frontend. Alternatively, you can redirect your users to the standalone hosted onramp.\n\nRelated guide: Integrate the onramp\n\nShow\n\nCrypto Onramp Quotes \n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: Quotes API\n\nShow\n\nClimate Order \n\nOrders represent your intent to purchase a particular Climate product. When you create an order, the payment is deducted from your merchant balance.\n\nShow\n\nClimate Product \n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\nShow\n\nClimate Supplier \n\nA supplier of carbon removal.\n\nShow\n\nForwarding Request \n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: Forward card details to third-party API endpoints.\n\nShow\n\nWebhook Endpoints \n\nYou can configure webhook endpoints via the API to be notified about events that happen in your Stripe account or connected accounts.\n\nMost users configure webhooks from the dashboard, which provides a user interface for registering and testing your webhook endpoints.\n\nRelated guide: Setting up webhooks\n\nShow\n\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\nThe Stripe Shell is best experienced on desktop.\n$ ",
  "updatedAt": "2025-05-05T21:21:05.143Z"
}