{
  "url": "https://core.telegram.org/methods",
  "content": " Twitter\nHome\nFAQ\nApps\nAPI\nProtocol\nSchema\nAPIMethods\nMethods\nAccepting the Terms of Service\nName\tDescription\nhelp.getTermsOfServiceUpdate\tLook for updates of telegram's terms of service\nhelp.acceptTermsOfService\tAccept the new terms of service\nDealing with spam and ToS violations\nName\tDescription\naccount.reportPeer\tReport a peer for violation of telegram's Terms of Service\naccount.reportProfilePhoto\tReport a profile photo of a dialog\nchannels.reportSpam\tReports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup\nmessages.report\tReport a message in a chat for violation of telegram's Terms of Service\nmessages.reportSpam\tReport a new incoming chat for spam, if the peer settings of the chat allow us to do that\nmessages.reportEncryptedSpam\tReport a secret chat for spam\nFetching configuration\nName\tDescription\nhelp.getAppConfig\tGet app-specific configuration, see client configuration for more info on the result.\nhelp.getAppUpdate\tReturns information on update availability for the current application.\nhelp.getConfig\tReturns current configuration, including data center configuration.\nhelp.getInviteText\tReturns localized text of a text message with an invitation.\nhelp.getNearestDc\tReturns info on data center nearest to the user.\nhelp.getSupport\tReturns the support user for the \"ask a question\" feature.\nhelp.getSupportName\tGet localized name of the telegram support user\nhelp.getCountriesList\tGet name, ISO code, localized name and phone codes/patterns of all available countries\nhelp.dismissSuggestion\tDismiss a suggestion, see here for more info ».\nLogin via QR code\nName\tDescription\nauth.exportLoginToken\tGenerate a login token, for login via QR code.\nThe generated login token should be encoded using base64url, then shown as a tg://login?token=base64encodedtoken deep link » in the QR code.\n\nFor more info, see login via QR code.\nauth.acceptLoginToken\tAccept QR code login token, logging in the app that generated it.\n\nReturns info about the new session.\n\nFor more info, see login via QR code.\nauth.importLoginToken\tLogin using a redirected login token, generated in case of DC mismatch during QR code login.\n\nFor more info, see login via QR code.\nMiscellaneous\nName\tDescription\nhelp.saveAppLog\tSaves logs of application on the server.\ninitConnection\tInitialize connection\ninvokeAfterMsg\tInvokes a query after successful completion of one of the previous queries.\ninvokeAfterMsgs\tInvokes a query after a successful completion of previous queries\ninvokeWithLayer\tInvoke the specified query using the specified API layer\ninvokeWithoutUpdates\tInvoke a request without subscribing the used connection for updates (this is enabled by default for file queries).\ninvokeWithGooglePlayIntegrity\tOfficial clients only, invoke with Google Play Integrity token.\ninvokeWithApnsSecret\tOfficial clients only, invoke with Apple push verification.\nRegistration/Authorization\nName\tDescription\nauth.bindTempAuthKey\tBinds a temporary authorization key temp_auth_key_id to the permanent authorization key perm_auth_key_id. Each permanent key may only be bound to one temporary key at a time, binding a new temporary key overwrites the previous one.\n\nFor more information, see Perfect Forward Secrecy.\nauth.cancelCode\tCancel the login verification code\naccount.sendVerifyEmailCode\tSend an email verification code.\naccount.verifyEmail\tVerify an email address.\nauth.resetLoginEmail\tReset the login email ».\nauth.checkPassword\tTry logging to an account protected by a 2FA password.\naccount.resetPassword\tInitiate a 2FA password reset: can only be used if the user is already logged-in, see here for more info »\nauth.checkRecoveryPassword\tCheck if the 2FA recovery code sent using auth.requestPasswordRecovery is valid, before passing it to auth.recoverPassword.\nauth.dropTempAuthKeys\tDelete all temporary authorization keys except for the ones specified\nauth.exportAuthorization\tReturns data for copying authorization to another data-center.\nauth.importAuthorization\tLogs in a user using a key transmitted from his native data-center.\nauth.importBotAuthorization\tLogin as a bot\naccount.changeAuthorizationSettings\tChange settings related to a session.\naccount.setAuthorizationTTL\tSet time-to-live of current session\nauth.logOut\tLogs out the user.\nauth.recoverPassword\tReset the 2FA password using the recovery code sent using auth.requestPasswordRecovery.\nauth.requestPasswordRecovery\tRequest recovery code of a 2FA password, only for accounts with a recovery email configured.\nauth.resendCode\tResend the login code via another medium, the phone code type is determined by the return value of the previous auth.sendCode/auth.resendCode: see login for more info.\nauth.resetAuthorizations\tTerminates all user's authorized sessions except for the current one.\n\nAfter calling this method it is necessary to reregister the current device using the method account.registerDevice\nauth.sendCode\tSend the verification code for login\nauth.reportMissingCode\tOfficial apps only, reports that the SMS authentication code wasn't delivered.\nauth.signIn\tSigns in a user with a validated phone number.\nauth.signUp\tRegisters a validated phone number in the system.\nauth.requestFirebaseSms\tRequest an SMS code via Firebase.\nauth.importWebTokenAuthorization\tLogin by importing an authorization token\naccount.invalidateSignInCodes\tInvalidate the specified login codes, see here » for more info.\nWorking with Public Service Announcement and MTProxy channels\nName\tDescription\nhelp.hidePromoData\tHide MTProxy/Public Service Announcement information\nhelp.getPromoData\tGet MTProxy/Public Service Announcement information\nWorking with SMS jobs\nName\tDescription\nsmsjobs.isEligibleToJoin\tCheck if we can process SMS jobs (official clients only).\nsmsjobs.join\tEnable SMS jobs (official clients only).\nsmsjobs.leave\tDisable SMS jobs (official clients only).\nsmsjobs.updateSettings\tUpdate SMS job settings (official clients only).\nsmsjobs.getStatus\tGet SMS jobs status (official clients only).\nsmsjobs.getSmsJob\tGet info about an SMS job (official clients only).\nsmsjobs.finishJob\tFinish an SMS job (official clients only).\nWorking with TSF (internal use only)\nName\tDescription\nhelp.editUserInfo\tInternal use\nhelp.getUserInfo\tCan only be used by TSF members to obtain internal information.\nWorking with Telegram Premium\nName\tDescription\npayments.canPurchasePremium\tChecks whether Telegram Premium purchase is possible. Must be called before in-store Premium purchase, official apps only.\nhelp.getPremiumPromo\tGet Telegram Premium promotion information\npayments.assignAppStoreTransaction\tInforms server about a purchase made through the App Store: for official applications only.\npayments.assignPlayMarketTransaction\tInforms server about a purchase made through the Play Store: for official applications only.\nWorking with 2FA login\nName\tDescription\naccount.confirmPasswordEmail\tVerify an email to use as 2FA recovery method.\naccount.resendPasswordEmail\tResend the code to verify an email to use as 2FA recovery method.\naccount.cancelPasswordEmail\tCancel the code that was sent to verify an email to use as 2FA recovery method.\naccount.getPassword\tObtain configuration for two-factor authorization with password\naccount.getPasswordSettings\tGet private info associated to the password info (recovery email, telegram passport info & so on)\naccount.updatePasswordSettings\tSet a new 2FA password\naccount.declinePasswordReset\tAbort a pending 2FA password reset, see here for more info »\nWorking with Fragment collectibles\nName\tDescription\nfragment.getCollectibleInfo\tFetch information about a fragment collectible, see here » for more info on the full flow.\nWorking with GIFs »\nName\tDescription\nmessages.getSavedGifs\tGet saved GIFs.\nmessages.saveGif\tAdd GIF to saved gifs list\nWorking with Main Mini Bot Apps » and the Mini App Store\nName\tDescription\nbots.getPopularAppBots\tFetch popular Main Mini Apps, to be used in the apps tab of global search ».\nbots.addPreviewMedia\tAdd a main mini app preview, see here » for more info.\n\nOnly owners of bots with a configured Main Mini App can use this method, see see here » for more info on how to check if you can invoke this method.\nbots.editPreviewMedia\tEdit a main mini app preview, see here » for more info.\n\nOnly owners of bots with a configured Main Mini App can use this method, see see here » for more info on how to check if you can invoke this method.\nbots.deletePreviewMedia\tDelete a main mini app preview, see here » for more info.\n\nOnly owners of bots with a configured Main Mini App can use this method, see see here » for more info on how to check if you can invoke this method.\nbots.reorderPreviewMedias\tReorder a main mini app previews, see here » for more info.\n\nOnly owners of bots with a configured Main Mini App can use this method, see see here » for more info on how to check if you can invoke this method.\nbots.getPreviewInfo\tBot owners only, fetch main mini app preview information, see here » for more info.\n\nNote: technically non-owners may also invoke this method, but it will always behave exactly as bots.getPreviewMedias, returning only previews for the current language and an empty lang_codes array, regardless of the passed lang_code, so please only use bots.getPreviewMedias if you're not the owner of the bot.\nbots.getPreviewMedias\tFetch main mini app previews, see here » for more info.\nmessages.requestMainWebView\tOpen a Main Mini App.\nWorking with Mini Bot Apps »\nName\tDescription\nmessages.requestWebView\tOpen a bot mini app, sending over user information after user confirmation.\n\nAfter calling this method, until the user closes the webview, messages.prolongWebView must be called every 60 seconds.\nmessages.prolongWebView\tIndicate to the server (from the user side) that the user is still using a web app.\n\nIf the method returns a QUERY_ID_INVALID error, the webview must be closed.\nmessages.requestSimpleWebView\tOpen a bot mini app.\nmessages.sendWebViewResultMessage\tTerminate webview interaction started with messages.requestWebView, sending the specified message to the chat on behalf of the user.\nmessages.sendWebViewData\tUsed by the user to relay data from an opened reply keyboard bot mini app to the bot that owns it.\nmessages.requestAppWebView\tOpen a bot mini app from a direct Mini App deep link, sending over user information after user confirmation.\n\nAfter calling this method, until the user closes the webview, messages.prolongWebView must be called every 60 seconds.\nmessages.getBotApp\tObtain information about a direct link Mini App\nbots.canSendMessage\tCheck whether the specified bot can send us messages\nbots.allowSendMessage\tAllow the specified bot to send us messages\nbots.invokeWebViewCustomMethod\tSend a custom request from a mini bot app, triggered by a web_app_invoke_custom_method event ».\n\nThe response should be sent using a custom_method_invoked event, see here » for more info on the flow.\nbots.checkDownloadFileParams\tCheck if a mini app can request the download of a specific file: called when handling web_app_request_file_download events »\nWorking with Seamless Telegram Login\nName\tDescription\nmessages.requestUrlAuth\tGet more info about a Seamless Telegram Login authorization request, for more info click here »\nmessages.acceptUrlAuth\tUse this to accept a Seamless Telegram Login authorization request, for more info click here »\naccount.getWebAuthorizations\tGet web login widget authorizations\naccount.resetWebAuthorization\tLog out an active web telegram login session\naccount.resetWebAuthorizations\tReset all active web telegram login sessions\nWorking with Telegram Business chat links\nName\tDescription\naccount.createBusinessChatLink\tCreate a business chat deep link ».\naccount.editBusinessChatLink\tEdit a created business chat deep link ».\naccount.deleteBusinessChatLink\tDelete a business chat deep link ».\naccount.getBusinessChatLinks\tList all created business chat deep links ».\naccount.resolveBusinessChatLink\tResolve a business chat deep link ».\nWorking with Telegram Business connected bots »\nName\tDescription\naccount.updateConnectedBot\tConnect a business bot » to the current account, or to change the current connection settings.\naccount.getConnectedBots\tList all currently connected business bots »\naccount.toggleConnectedBotPaused\tPause or unpause a specific chat, temporarily disconnecting it from all business bots ».\naccount.disablePeerConnectedBot\tPermanently disconnect a specific chat from all business bots » (equivalent to specifying it in recipients.exclude_users during initial configuration with account.updateConnectedBot »); to reconnect of a chat disconnected using this method the user must reconnect the entire bot by invoking account.updateConnectedBot ».\naccount.getBotBusinessConnection\tBots may invoke this method to re-fetch the updateBotBusinessConnect constructor associated with a specific business connection_id, see here » for more info on connected business bots.\nThis is needed for example for freshly logged in bots that are receiving some updateBotNewBusinessMessage, etc. updates because some users have already connected to the bot before it could login.\nIn this case, the bot is receiving messages from the business connection, but it hasn't cached the associated updateBotBusinessConnect with info about the connection (can it reply to messages? etc.) yet, and cannot receive the old ones because they were sent when the bot wasn't logged into the session yet.\nThis method can be used to fetch info about a not-yet-cached business connection, and should not be invoked if the info is already cached or to fetch changes, as eventual changes will automatically be sent as new updateBotBusinessConnect updates to the bot using the usual update delivery methods ».\ninvokeWithBusinessConnection\tInvoke a method using a Telegram Business Bot connection, see here » for more info, including a list of the methods that can be wrapped in this constructor.\n\nMake sure to always send queries wrapped in a invokeWithBusinessConnection to the datacenter ID, specified in the dc_id field of the botBusinessConnection that is being used.\nWorking with Telegram Business greeting and away messages\nName\tDescription\naccount.updateBusinessGreetingMessage\tSet a list of Telegram Business greeting messages.\naccount.updateBusinessAwayMessage\tSet a list of Telegram Business away messages.\nWorking with Telegram Business opening hours »\nName\tDescription\naccount.updateBusinessWorkHours\tSpecify a set of Telegram Business opening hours.\nThis info will be contained in userFull.business_work_hours.\n\nTo remove all opening hours, invoke the method without setting the business_work_hours field.\n\nNote that the opening hours specified by the user must be appropriately validated and transformed before invoking the method, as specified here ».\nWorking with Telegram Business quick reply shortcuts »\nName\tDescription\nmessages.getQuickReplies\tFetch basic info about all existing quick reply shortcuts.\nmessages.reorderQuickReplies\tReorder quick reply shortcuts.\n\nThis will emit an updateQuickReplies update to other logged-in sessions.\nmessages.checkQuickReplyShortcut\tBefore offering the user the choice to add a message to a quick reply shortcut, to make sure that none of the limits specified here » were reached.\nmessages.editQuickReplyShortcut\tRename a quick reply shortcut.\nThis will emit an updateQuickReplies update to other logged-in sessions.\nmessages.deleteQuickReplyShortcut\tCompletely delete a quick reply shortcut.\nThis will also emit an updateDeleteQuickReply update to other logged-in sessions (and no updateDeleteQuickReplyMessages updates, even if all the messages in the shortcuts are also deleted by this method).\nmessages.getQuickReplyMessages\tFetch (a subset or all) messages in a quick reply shortcut ».\nmessages.sendQuickReplyMessages\tSend a quick reply shortcut ».\nmessages.deleteQuickReplyMessages\tDelete one or more messages from a quick reply shortcut. This will also emit an updateDeleteQuickReplyMessages update.\nWorking with Telegram Gifts\nName\tDescription\npayments.getStarGifts\tGet a list of available gifts, see here » for more info.\npayments.getUserStarGifts\tGet the gifts » pinned on a specific user's profile.\n\nMay also be used to fetch all gifts received by the current user.\npayments.saveStarGift\tDisplay or remove a received gift » from our profile.\npayments.convertStarGift\tConvert a received gift » into Telegram Stars: this will permanently destroy the gift, converting it into starGift.convert_stars Telegram Stars, added to the user's balance.\n\nNote that starGift.convert_stars will be less than the buying price (starGift.stars) of the gift if it was originally bought using Telegram Stars bought a long time ago.\nWorking with Telegram Star subscriptions »\nName\tDescription\npayments.getStarsSubscriptions\tObtain a list of active, expired or cancelled Telegram Star subscriptions ».\npayments.changeStarsSubscription\tActivate or deactivate a Telegram Star subscription ».\npayments.fulfillStarsSubscription\tRe-join a private channel associated to an active Telegram Star subscription ».\npayments.botCancelStarsSubscription\tCancel a bot subscription\nWorking with Telegram Stars\nName\tDescription\npayments.getStarsTopupOptions\tObtain a list of Telegram Stars topup options » as starsTopupOption constructors.\npayments.getStarsStatus\tGet the current Telegram Stars balance of the current account (with peer=inputPeerSelf), or the stars balance of the bot specified in peer.\npayments.getStarsTransactions\tFetch Telegram Stars transactions.\n\nThe inbound and outbound flags are mutually exclusive: if none of the two are set, both incoming and outgoing transactions are fetched.\npayments.sendStarsForm\tMake a payment using Telegram Stars, see here » for more info.\npayments.refundStarsCharge\tRefund a Telegram Stars transaction, see here » for more info.\npayments.getStarsRevenueStats\tGet Telegram Star revenue statistics ».\npayments.getStarsRevenueWithdrawalUrl\tWithdraw funds from a channel or bot's star balance ».\npayments.getStarsRevenueAdsAccountUrl\tReturns a URL for a Telegram Ad platform account that can be used to set up advertisements for channel/bot in peer, paid using the Telegram Stars owned by the specified peer, see here » for more info.\npayments.getStarsTransactionsByID\tObtain info about Telegram Star transactions » using specific transaction IDs.\npayments.getStarsGiftOptions\tObtain a list of Telegram Stars gift options » as starsGiftOption constructors.\nWorking with VoIP calls\nName\tDescription\nphone.acceptCall\tAccept incoming call\nphone.confirmCall\tComplete phone call E2E encryption key exchange »\nphone.discardCall\tRefuse or end running call\nphone.getCallConfig\tGet phone call configuration to be passed to libtgvoip's shared config\nphone.receivedCall\tOptional: notify the server that the user is currently busy in a call: this will automatically refuse all incoming phone calls until the current phone call is ended.\nphone.requestCall\tStart a telegram phone call\nphone.saveCallDebug\tSend phone call debug data to server\nphone.sendSignalingData\tSend VoIP signaling data\nphone.setCallRating\tRate a call, returns info about the rating message sent to the official VoIP bot.\nphone.saveCallLog\tSave phone call debug information\nmessages.deletePhoneCallHistory\tDelete the entire phone call history.\nWorking with accent colors »\nName\tDescription\nhelp.getPeerColors\tGet the set of accent color palettes » that can be used for message accents.\nhelp.getPeerProfileColors\tGet the set of accent color palettes » that can be used in profile page backgrounds.\naccount.updateColor\tUpdate the accent color and background custom emoji » of the current account.\nchannels.updateColor\tUpdate the accent color and background custom emoji » of a channel.\naccount.getDefaultBackgroundEmojis\tGet a set of suggested custom emoji stickers that can be used in an accent color pattern.\nWorking with affiliate programs\nName\tDescription\npayments.getConnectedStarRefBots\tFetch all affiliations we have created for a certain peer\npayments.getConnectedStarRefBot\tFetch info about a specific bot affiliation »\npayments.getSuggestedStarRefBots\tObtain a list of suggested mini apps with available affiliate programs\n\norder_by_revenue and order_by_date are mutually exclusive: if neither is set, results are sorted by profitability.\npayments.connectStarRefBot\tJoin a bot's affiliate program, becoming an affiliate »\npayments.editConnectedStarRefBot\tLeave a bot's affiliate program »\nbots.updateStarRefProgram\tCreate, edit or delete the affiliate program of a bot we own\nWorking with boosts »\nName\tDescription\npremium.getBoostsList\tObtains info about the boosts that were applied to a certain channel or supergroup (admins only)\npremium.getMyBoosts\tObtain which peers are we currently boosting, and how many boost slots we have left.\npremium.applyBoost\tApply one or more boosts » to a peer.\npremium.getBoostsStatus\tGets the current number of boosts of a channel/supergroup.\npremium.getUserBoosts\tReturns the lists of boost that were applied to a channel/supergroup by a specific user (admins only)\nchannels.setBoostsToUnblockRestrictions\tAdmins with ban_users admin rights » may allow users that apply a certain number of booosts » to the group to bypass slow mode » and other » supergroup restrictions, see here » for more info.\nWorking with channel recommendations »\nName\tDescription\nchannels.getChannelRecommendations\tObtain a list of similarly themed public channels, selected based on similarities in their subscriber bases.\nWorking with channels/supergroups/geogroups\nName\tDescription\nchannels.createChannel\tCreate a supergroup/channel.\nchannels.getInactiveChannels\tGet inactive channels and supergroups\nchannels.deleteChannel\tDelete a channel/supergroup\nchannels.deleteHistory\tDelete the history of a supergroup\nchannels.deleteMessages\tDelete messages in a channel/supergroup\nchannels.deleteParticipantHistory\tDelete all messages sent by a specific participant of a given supergroup\nchannels.editAdmin\tModify the admin rights of a user in a supergroup/channel.\nchannels.editBanned\tBan/unban/kick a user in a supergroup/channel.\nchannels.editCreator\tTransfer channel ownership\nchannels.editLocation\tEdit location of geogroup, see here » for more info on geogroups.\nchannels.editPhoto\tChange the photo of a channel/supergroup\nchannels.editTitle\tEdit the name of a channel/supergroup\nchannels.exportMessageLink\tGet link and embed info of a message in a channel/supergroup\nchannels.getAdminLog\tGet the admin log of a channel/supergroup\nchannels.getAdminedPublicChannels\tGet channels/supergroups/geogroups we're admin in. Usually called when the user exceeds the limit for owned public channels/supergroups/geogroups, and the user is given the choice to remove one of his channels/supergroups/geogroups.\nchannels.getChannels\tGet info about channels/supergroups\nchannels.getFullChannel\tGet full info about a supergroup, gigagroup or channel\nchannels.getGroupsForDiscussion\tGet all groups that can be used as discussion groups.\n\nReturned basic group chats must be first upgraded to supergroups before they can be set as a discussion group.\nTo set a returned supergroup as a discussion group, access to its old messages must be enabled using channels.togglePreHistoryHidden, first.\nchannels.getMessages\tGet channel/supergroup messages\nchannels.getParticipant\tGet info about a channel/supergroup participant\nchannels.getParticipants\tGet the participants of a supergroup/channel\nchannels.inviteToChannel\tInvite users to a channel/supergroup\nchannels.joinChannel\tJoin a channel/supergroup\nchannels.leaveChannel\tLeave a channel/supergroup\nchannels.readHistory\tMark channel/supergroup history as read\nchannels.readMessageContents\tMark channel/supergroup message contents as read\nchannels.setDiscussionGroup\tAssociate a group to a channel as discussion group for that channel\nchannels.setStickers\tAssociate a stickerset to the supergroup\nchannels.togglePreHistoryHidden\tHide/unhide message history for new channel/supergroup users\nchannels.toggleSignatures\tEnable/disable message signatures in channels\nchannels.toggleSlowMode\tToggle supergroup slow mode: if enabled, users will only be able to send one message every seconds seconds\nchannels.toggleParticipantsHidden\tHide or display the participants list in a supergroup.\n\nThe supergroup must have at least hidden_members_group_size_min participants in order to use this method, as specified by the client configuration parameters ».\nWorking with chat invites and join requests\nName\tDescription\nmessages.exportChatInvite\tExport an invite link for a chat\nmessages.getExportedChatInvite\tGet info about a chat invite\nmessages.getExportedChatInvites\tGet info about the chat invites of a specific chat\nmessages.editExportedChatInvite\tEdit an exported chat invite\nmessages.deleteRevokedExportedChatInvites\tDelete all revoked chat invites\nmessages.deleteExportedChatInvite\tDelete a chat invite\nmessages.getAdminsWithInvites\tGet info about chat invites generated by admins.\nmessages.getChatInviteImporters\tGet info about the users that joined the chat using a specific chat invite\nmessages.checkChatInvite\tCheck the validity of a chat invite link and get basic info about it\nmessages.importChatInvite\tImport a chat invite and join a private chat/supergroup/channel\nmessages.hideChatJoinRequest\tDismiss or approve a chat join request related to a specific chat or channel.\nmessages.hideAllChatJoinRequests\tDismiss or approve all join requests related to a specific chat or channel.\nchannels.toggleJoinToSend\tSet whether all users should join a discussion group in order to comment on a post »\nchannels.toggleJoinRequest\tSet whether all users should request admin approval to join the group ».\nWorking with chats/supergroups/channels\nName\tDescription\nmessages.getMessageReadParticipants\tGet which users read a specific message: only available for groups and supergroups with less than chat_read_mark_size_threshold members, read receipts will be stored for chat_read_mark_expire_period seconds after the message was sent, see client configuration for more info ».\nmessages.addChatUser\tAdds a user to a chat and sends a service message on it.\nmessages.createChat\tCreates a new chat.\nmessages.deleteChatUser\tDeletes a user from a chat and sends a service message on it.\nmessages.editChatAbout\tEdit the description of a group/supergroup/channel.\nmessages.editChatAdmin\tMake a user admin in a basic group.\nmessages.editChatDefaultBannedRights\tEdit the default banned rights of a channel/supergroup/group.\nmessages.editChatPhoto\tChanges chat photo and sends a service message on it\nmessages.editChatTitle\tChanges chat name and sends a service message on it.\nmessages.getChats\tReturns chat basic info on their IDs.\nmessages.deleteChat\tDelete a chat\nmessages.getCommonChats\tGet chats in common with a user\nmessages.getFullChat\tGet full info about a basic group.\nmessages.migrateChat\tTurn a basic group into a supergroup\nchannels.convertToGigagroup\tConvert a supergroup to a gigagroup, when requested by channel suggestions.\nchannels.setEmojiStickers\tSet a custom emoji stickerset for supergroups. Only usable after reaching at least the boost level » specified in the group_emoji_stickers_level_min » config parameter.\nWorking with cloud themes\nName\tDescription\naccount.updateTheme\tUpdate theme\naccount.uploadTheme\tUpload theme\naccount.getThemes\tGet installed themes\naccount.createTheme\tCreate a theme\naccount.installTheme\tInstall a theme\naccount.saveTheme\tSave a theme\naccount.getTheme\tGet theme information\naccount.getChatThemes\tGet all available chat themes ».\nmessages.setChatTheme\tChange the chat theme of a certain chat\nWorking with custom animated emojis\nName\tDescription\nmessages.getCustomEmojiDocuments\tFetch custom emoji stickers ».\n\nReturns a list of documents with the animated custom emoji in TGS format, and a documentAttributeCustomEmoji attribute with the original emoji and info about the emoji stickerset this custom emoji belongs to.\nmessages.getEmojiStickers\tGets the list of currently installed custom emoji stickersets.\nmessages.getFeaturedEmojiStickers\tGets featured custom emoji stickersets.\nmessages.searchCustomEmoji\tLook for custom emojis associated to a UTF8 emoji\naccount.getDefaultProfilePhotoEmojis\tGet a set of suggested custom emoji stickers that can be used as profile picture\naccount.getDefaultGroupPhotoEmojis\tGet a set of suggested custom emoji stickers that can be used as group picture\nWorking with deep links\nName\tDescription\nmessages.startBot\tStart a conversation with a bot using a deep linking parameter\nhelp.getDeepLinkInfo\tGet info about an unsupported deep link, see here for more info ».\nhelp.getRecentMeUrls\tGet recently used t.me links.\n\nWhen installing official applications from \"Download Telegram\" buttons present in t.me pages, a referral parameter is passed to applications after installation.\nIf, after downloading the application, the user creates a new account (instead of logging into an existing one), the referral parameter should be imported using this method, which returns the t.me pages the user recently opened, before installing Telegram.\nWorking with drafts\nName\tDescription\nmessages.clearAllDrafts\tClear all drafts.\nmessages.getAllDrafts\tReturn all message drafts.\nReturns all the latest updateDraftMessage updates related to all chats with drafts.\nmessages.saveDraft\tSave a message draft associated to a chat.\nWorking with emoji categories\nName\tDescription\nmessages.getEmojiStickerGroups\tRepresents a list of emoji categories, to be used when choosing a sticker.\nmessages.getEmojiGroups\tRepresents a list of emoji categories.\nmessages.getEmojiStatusGroups\tRepresents a list of emoji categories, to be used when selecting custom emojis to set as custom emoji status.\nmessages.getEmojiProfilePhotoGroups\tRepresents a list of emoji categories, to be used when selecting custom emojis to set as profile picture.\nWorking with emoji keywords\nName\tDescription\nmessages.getEmojiKeywords\tGet localized emoji keywords ».\nmessages.getEmojiKeywordsDifference\tGet changed emoji keywords ».\nmessages.getEmojiKeywordsLanguages\tObtain a list of related languages that must be used when fetching emoji keyword lists ».\n\nUsually the method will return the passed language codes (if localized) + en + some language codes for similar languages (if applicable).\nmessages.getEmojiURL\tReturns an HTTP URL which can be used to automatically log in into translation platform and suggest new emoji keywords ». The URL will be valid for 30 seconds after generation.\nWorking with emoji statuses\nName\tDescription\naccount.updateEmojiStatus\tSet an emoji status\nchannels.updateEmojiStatus\tSet an emoji status for a channel or supergroup.\naccount.getDefaultEmojiStatuses\tGet a list of default suggested emoji statuses\naccount.getChannelDefaultEmojiStatuses\tGet a list of default suggested channel emoji statuses.\naccount.getChannelRestrictedStatusEmojis\tReturns fetch the full list of custom emoji IDs » that cannot be used in channel emoji statuses ».\naccount.getRecentEmojiStatuses\tGet recently used emoji statuses\naccount.clearRecentEmojiStatuses\tClears list of recently used emoji statuses\nbots.updateUserEmojiStatus\tChange the emoji status of a user (invoked by bots, see here » for more info on the full flow)\nbots.toggleUserEmojiStatusPermission\tAllow or prevent a bot from changing our emoji status »\nWorking with fact-checks\nName\tDescription\nmessages.editFactCheck\tEdit/create a fact-check on a message.\n\nCan only be used by independent fact-checkers as specified by the appConfig.can_edit_factcheck configuration flag.\nmessages.deleteFactCheck\tDelete a fact-check from a message.\n\nCan only be used by independent fact-checkers as specified by the appConfig.can_edit_factcheck configuration flag.\nmessages.getFactCheck\tFetch one or more factchecks, see here » for the full flow.\nWorking with files\nName\tDescription\nhelp.getCdnConfig\tGet configuration for CDN file downloads.\nupload.getCdnFile\tDownload a CDN file.\nupload.getCdnFileHashes\tGet SHA256 hashes for verifying downloaded CDN files\nupload.reuploadCdnFile\tRequest a reupload of a certain file to a CDN DC.\nupload.getFile\tReturns content of a whole file or its part.\nupload.getFileHashes\tGet SHA256 hashes for verifying downloaded files\nupload.getWebFile\tReturns content of a web file, by proxying the request through telegram, see the webfile docs for more info.\n\nNote: the query must be sent to the DC specified in the webfile_dc_id MTProto configuration field.\nupload.saveBigFilePart\tSaves a part of a large file (over 10 MB in size) to be later passed to one of the methods.\nupload.saveFilePart\tSaves a part of file for further sending to one of the methods.\nmessages.uploadEncryptedFile\tUpload encrypted file and associate it to a secret chat\nmessages.uploadMedia\tUpload a file and associate it to a chat (without actually sending it to the chat)\nmessages.getDocumentByHash\tGet a document by its SHA256 hash, mainly used for gifs\nWorking with folder tags\nName\tDescription\nmessages.toggleDialogFilterTags\tEnable or disable folder tags ».\nWorking with folders\nName\tDescription\nmessages.updateDialogFiltersOrder\tReorder folders\nmessages.getDialogFilters\tGet folders\nmessages.getSuggestedDialogFilters\tGet suggested folders\nmessages.updateDialogFilter\tUpdate folder\nfolders.editPeerFolders\tEdit peers in peer folder\nchatlists.exportChatlistInvite\tExport a folder », creating a chat folder deep link ».\nchatlists.deleteExportedInvite\tDelete a previously created chat folder deep link ».\nchatlists.editExportedInvite\tEdit a chat folder deep link ».\nchatlists.getExportedInvites\tList all chat folder deep links » associated to a folder\nchatlists.checkChatlistInvite\tObtain information about a chat folder deep link ».\nchatlists.joinChatlistInvite\tImport a chat folder deep link », joining some or all the chats in the folder.\nchatlists.getChatlistUpdates\tFetch new chats associated with an imported chat folder deep link ». Must be invoked at most every chatlist_update_period seconds (as per the related client configuration parameter »).\nchatlists.joinChatlistUpdates\tJoin channels and supergroups recently added to a chat folder deep link ».\nchatlists.hideChatlistUpdates\tDismiss new pending peers recently added to a chat folder deep link ».\nchatlists.getLeaveChatlistSuggestions\tReturns identifiers of pinned or always included chats from a chat folder imported using a chat folder deep link », which are suggested to be left when the chat folder is deleted.\nchatlists.leaveChatlist\tDelete a folder imported using a chat folder deep link »\nWorking with forums\nName\tDescription\nchannels.toggleForum\tEnable or disable forum functionality in a supergroup.\nchannels.createForumTopic\tCreate a forum topic; requires manage_topics rights.\nchannels.getForumTopics\tGet topics of a forum\nchannels.getForumTopicsByID\tGet forum topics by their ID\nchannels.editForumTopic\tEdit forum topic; requires manage_topics rights.\nchannels.updatePinnedForumTopic\tPin or unpin forum topics\nchannels.reorderPinnedForumTopics\tReorder pinned forum topics\nchannels.deleteTopicHistory\tDelete message history of a forum topic\nchannels.toggleViewForumAsMessages\tUsers may also choose to display messages from all topics of a forum as if they were sent to a normal group, using a \"View as messages\" setting in the local client: this setting only affects the current account, and is synced to other logged in sessions using this method.\n\nInvoking this method will update the value of the view_forum_as_messages flag of channelFull or dialog and emit an updateChannelViewForumAsMessages.\nWorking with fragment.com usernames\nName\tDescription\naccount.reorderUsernames\tReorder usernames associated with the currently logged-in user.\naccount.toggleUsername\tActivate or deactivate a purchased fragment.com username associated to the currently logged-in user.\nbots.reorderUsernames\tReorder usernames associated to a bot we own.\nbots.toggleUsername\tActivate or deactivate a purchased fragment.com username associated to a bot we own.\nchannels.reorderUsernames\tReorder active usernames\nchannels.toggleUsername\tActivate or deactivate a purchased fragment.com username associated to a supergroup or channel we own.\nchannels.deactivateAllUsernames\tDisable all purchased usernames of a supergroup or channel\nWorking with games\nName\tDescription\nmessages.getGameHighScores\tGet highscores of a game\nmessages.getInlineGameHighScores\tGet highscores of a game sent using an inline bot\nmessages.setGameScore\tUse this method to set the score of the specified user in a game sent as a normal message (bots only).\nmessages.setInlineGameScore\tUse this method to set the score of the specified user in a game sent as an inline message (bots only).\nWorking with gift codes\nName\tDescription\npayments.checkGiftCode\tObtain information about a Telegram Premium giftcode »\npayments.applyGiftCode\tApply a Telegram Premium giftcode »\nWorking with giveaways & gifts\nName\tDescription\npayments.getPremiumGiftCodeOptions\tObtain a list of Telegram Premium giveaway/gift code » options.\npayments.getGiveawayInfo\tObtain information about a Telegram Premium giveaway ».\npayments.launchPrepaidGiveaway\tLaunch a prepaid giveaway ».\npayments.getStarsGiveawayOptions\tFetch a list of star giveaway options ».\nWorking with instant view pages\nName\tDescription\nmessages.getWebPage\tGet instant view page\nmessages.getWebPagePreview\tGet preview of webpage\nWorking with message effects\nName\tDescription\nmessages.getAvailableEffects\tFetch the full list of usable animated message effects ».\nWorking with message reactions\nName\tDescription\nmessages.setDefaultReaction\tChange default emoji reaction to use in the quick reaction menu: the value is synced across devices and can be fetched using help.getConfig, reactions_default field.\nmessages.getMessagesReactions\tGet message reactions »\nmessages.sendReaction\tReact to message.\n\nStarting from layer 159, the reaction will be sent from the peer specified using messages.saveDefaultSendAs.\nmessages.getAvailableReactions\tObtain available message reactions »\nmessages.getUnreadReactions\tGet unread reactions to messages you sent\nmessages.readReactions\tMark message reactions » as read\nmessages.setChatAvailableReactions\tChange the set of message reactions » that can be used in a certain group, supergroup or channel\nmessages.getMessageReactionsList\tGet message reaction list, along with the sender of each reaction.\nmessages.reportReaction\tReport a message reaction\nmessages.getTopReactions\tGot popular message reactions\nmessages.getRecentReactions\tGet recently used message reactions\nmessages.clearRecentReactions\tClear recently used message reactions\nmessages.sendPaidReaction\tSends one or more paid Telegram Star reactions », transferring Telegram Stars » to a channel's balance.\nmessages.togglePaidReactionPrivacy\tChanges the privacy of already sent paid reactions on a specific message.\nmessages.getPaidReactionPrivacy\tFetches an updatePaidReactionPrivacy update with the current default paid reaction privacy, see here » for more info.\nWorking with message translation\nName\tDescription\nmessages.translateText\tTranslate a given text.\n\nStyled text entities will only be preserved for Telegram Premium users.\nmessages.togglePeerTranslations\tShow or hide the real-time chat translation popup for a certain chat\nWorking with paid media\nName\tDescription\nmessages.getExtendedMedia\tFetch updated information about paid media, see here » for the full flow.\n\nThis method will return an array of updateMessageExtendedMedia updates, only for messages containing already bought paid media.\nNo information will be returned for messages containing not yet bought paid media.\nWorking with prepared inline messages\nName\tDescription\nmessages.savePreparedInlineMessage\tSave a prepared inline message, to be shared by the user of the mini app using a web_app_send_prepared_message event\nmessages.getPreparedInlineMessage\tObtain a prepared inline message generated by a mini app: invoked when handling web_app_send_prepared_message events\nWorking with reaction notification settings »\nName\tDescription\naccount.getReactionsNotifySettings\tGet the current reaction notification settings ».\naccount.setReactionsNotifySettings\tChange the reaction notification settings ».\nWorking with saved message dialogs »\nName\tDescription\nmessages.getSavedDialogs\tReturns the current saved dialog list, see here » for more info.\nmessages.getSavedHistory\tReturns saved messages » forwarded from a specific peer\nmessages.deleteSavedHistory\tDeletes messages forwarded from a specific peer to saved messages ».\nmessages.getPinnedSavedDialogs\tGet pinned saved dialogs, see here » for more info.\nmessages.toggleSavedDialogPin\tPin or unpin a saved message dialog ».\nmessages.reorderPinnedSavedDialogs\tReorder pinned saved message dialogs ».\nWorking with saved message tags »\nName\tDescription\nmessages.getSavedReactionTags\tFetch the full list of saved message tags created by the user.\nmessages.updateSavedReactionTag\tUpdate the description of a saved message tag ».\nmessages.getDefaultTagReactions\tFetch a default recommended list of saved message tag reactions.\nWorking with secret chats\nName\tDescription\nmessages.setEncryptedTyping\tSend typing event by the current user to a secret chat.\nmessages.readEncryptedHistory\tMarks message history within a secret chat as read.\nmessages.acceptEncryption\tConfirms creation of a secret chat\nmessages.discardEncryption\tCancels a request for creation and/or delete info on secret chat.\nmessages.requestEncryption\tSends a request to start a secret chat to the user.\nmessages.sendEncrypted\tSends a text message to a secret chat.\nmessages.sendEncryptedFile\tSends a message with a file attachment to a secret chat\nmessages.sendEncryptedService\tSends a service message to a secret chat.\nmessages.getDhConfig\tReturns configuration parameters for Diffie-Hellman key generation. Can also return a random sequence of bytes of required length.\nmessages.receivedQueue\tConfirms receipt of messages in a secret chat by client, cancels push notifications.\nThe method returns a list of random_ids of messages for which push notifications were cancelled.\nWorking with statistics\nName\tDescription\nstats.loadAsyncGraph\tLoad channel statistics graph asynchronously\nstats.getBroadcastStats\tGet channel statistics\nstats.getMessagePublicForwards\tObtains a list of messages, indicating to which other public channels was a channel message forwarded.\nWill return a list of messages with peer_id equal to the public channel to which this message was forwarded.\nstats.getMegagroupStats\tGet supergroup statistics\nstats.getMessageStats\tGet message statistics\nstats.getStoryStats\tGet statistics for a certain story.\nstats.getStoryPublicForwards\tObtain forwards of a story as a message to public chats and reposts by public channels.\nWorking with stickers »\nName\tDescription\nmessages.getOldFeaturedStickers\tMethod for fetching previously featured stickers\nmessages.toggleStickerSets\tApply changes to multiple stickersets\nstickers.suggestShortName\tSuggests a short name for a given stickerpack name\nstickers.replaceSticker\tReplace a sticker in a stickerset ».\nstickers.checkShortName\tCheck whether the given short name is available\nstickers.setStickerSetThumb\tSet stickerset thumbnail\nstickers.addStickerToSet\tAdd a sticker to a stickerset. The sticker set must have been created by the current user/bot.\nstickers.changeStickerPosition\tChanges the absolute position of a sticker in the set to which it belongs. The sticker set must have been created by the current user/bot.\nstickers.createStickerSet\tCreate a stickerset.\nstickers.changeSticker\tUpdate the keywords, emojis or mask coordinates of a sticker.\nstickers.renameStickerSet\tRenames a stickerset.\nstickers.deleteStickerSet\tDeletes a stickerset we created.\nmessages.getMyStickers\tFetch all stickersets » owned by the current user.\nstickers.removeStickerFromSet\tRemove a sticker from the set where it belongs. The sticker set must have been created by the current user/bot.\nmessages.clearRecentStickers\tClear recent stickers\nmessages.faveSticker\tMark or unmark a sticker as favorite\nmessages.getAllStickers\tGet all installed stickers\nmessages.getArchivedStickers\tGet all archived stickers\nmessages.getAttachedStickers\tGet stickers attached to a photo or video\nmessages.getFavedStickers\tGet faved stickers\nmessages.getFeaturedStickers\tGet featured stickers\nmessages.getMaskStickers\tGet installed mask stickers\nmessages.getRecentStickers\tGet recent stickers\nmessages.getStickerSet\tGet info about a stickerset\nmessages.getStickers\tGet stickers by emoji\nmessages.saveRecentSticker\tAdd/remove sticker from recent stickers list\nmessages.installStickerSet\tInstall a stickerset\nmessages.readFeaturedStickers\tMark new featured stickers as read\nmessages.reorderStickerSets\tReorder installed stickersets\nmessages.searchStickerSets\tSearch for stickersets\nmessages.searchStickers\tSearch for stickers using AI-powered keyword search\nmessages.searchEmojiStickerSets\tSearch for custom emoji stickersets »\nmessages.uninstallStickerSet\tUninstall a stickerset\nWorking with stories\nName\tDescription\nstories.searchPosts\tGlobally search for stories using a hashtag or a location media area, see here » for more info on the full flow.\n\nEither hashtag or area must be set when invoking the method.\nstories.canSendStory\tCheck whether we can post stories as the specified peer.\nstories.sendStory\tUploads a Telegram Story.\nstories.editStory\tEdit an uploaded story\nstories.deleteStories\tDeletes some posted stories.\nstories.togglePinnedToTop\tPin some stories to the top of the profile, see here » for more info.\nstories.togglePinned\tPin or unpin one or more stories\nstories.getAllStories\tFetch the List of active (or active and hidden) stories, see here » for more info on watching stories.\nstories.getPinnedStories\tFetch the stories pinned on a peer's profile.\nstories.getStoriesArchive\tFetch the story archive » of a peer we control.\nstories.getStoriesByID\tObtain full info about a set of stories by their IDs.\nstories.toggleAllStoriesHidden\tHide the active stories of a specific peer, preventing them from being displayed on the action bar on the homescreen.\nstories.readStories\tMark all stories up to a certain ID as read, for a given peer; will emit an updateReadStories update to all logged-in sessions.\nstories.incrementStoryViews\tIncrement the view counter of one or more stories.\nstories.getStoryViewsList\tObtain the list of users that have viewed a specific story we posted\nstories.getStoryReactionsList\tGet the reaction and interaction list of a story posted to a channel, along with the sender of each reaction.\n\nCan only be used by channel admins.\nstories.getStoriesViews\tObtain info about the view count, forward count, reactions and recent viewers of one or more stories.\nstories.exportStoryLink\tGenerate a story deep link for a specific story\nstories.report\tReport a story.\nstories.activateStealthMode\tActivates stories stealth mode, see here » for more info.\n\nWill return an updateStoriesStealthMode.\nstories.getPeerStories\tFetch the full active story list of a specific peer.\nstories.getAllReadPeerStories\tObtain the latest read story ID for all peers when first logging in, returned as a list of updateReadStories updates, see here » for more info.\nstories.getPeerMaxIDs\tGet the IDs of the maximum read stories for a set of peers.\nstories.getChatsToSend\tObtain a list of channels where the user can post stories\nstories.togglePeerStoriesHidden\tHide the active stories of a user, preventing them from being displayed on the action bar on the homescreen, see here » for more info.\nstories.sendReaction\tReact to a story.\nWorking with telegram passport\nName\tDescription\naccount.sendVerifyPhoneCode\tSend the verification phone code for telegram passport.\naccount.verifyPhone\tVerify a phone number for telegram passport.\naccount.acceptAuthorization\tSends a Telegram Passport authorization form, effectively sharing data with the service\naccount.getAuthorizationForm\tReturns a Telegram Passport authorization form for sharing data with a service\naccount.getAuthorizations\tGet logged-in sessions\naccount.deleteSecureValue\tDelete stored Telegram Passport documents, for more info see the passport docs »\naccount.getAllSecureValues\tGet all saved Telegram Passport documents, for more info see the passport docs »\naccount.getSecureValue\tGet saved Telegram Passport document, for more info see the passport docs »\naccount.saveSecureValue\tSecurely save Telegram Passport document, for more info see the passport docs »\nhelp.getPassportConfig\tGet passport configuration\nusers.setSecureValueErrors\tNotify the user that the sent passport data contains some errors The user will not be able to re-submit their Passport data to you until the errors are fixed (the contents of the field for which you returned the error must change).\n\nUse this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.\nWorking with temporary profile links\nName\tDescription\ncontacts.exportContactToken\tGenerates a temporary profile link for the currently logged-in user.\ncontacts.importContactToken\tObtain user info from a temporary profile link.\nWorking with updates\nName\tDescription\nupdates.getChannelDifference\tReturns the difference between the current state of updates of a certain channel and transmitted.\nupdates.getDifference\tGet new updates.\nupdates.getState\tReturns a current state of updates.\nWorking with voice message transcription\nName\tDescription\nmessages.transcribeAudio\tTranscribe voice message\nmessages.rateTranscribedAudio\tRate transcribed voice message\nWorking with wallpapers »\nName\tDescription\naccount.getMultiWallPapers\tGet info about multiple wallpapers\naccount.getWallPaper\tGet info about a certain wallpaper\naccount.getWallPapers\tReturns a list of available wallpapers.\naccount.installWallPaper\tInstall wallpaper\naccount.resetWallPapers\tDelete all installed wallpapers, reverting to the default wallpaper set.\naccount.saveWallPaper\tInstall/uninstall wallpaper\naccount.uploadWallPaper\tCreate and upload a new wallpaper\nmessages.setChatWallPaper\tSet a custom wallpaper » in a specific private chat with another user.\nWorking with bot admin right suggestions\nName\tDescription\nbots.setBotBroadcastDefaultAdminRights\tSet the default suggested admin rights for bots being added as admins to channels, see here for more info on how to handle them ».\nbots.setBotGroupDefaultAdminRights\tSet the default suggested admin rights for bots being added as admins to groups, see here for more info on how to handle them ».\nWorking with bot inline queries and callback buttons\nName\tDescription\nmessages.getInlineBotResults\tQuery an inline bot\nmessages.setInlineBotResults\tAnswer an inline query, for bots only\nmessages.sendInlineBotResult\tSend a result obtained using messages.getInlineBotResults.\nmessages.getBotCallbackAnswer\tPress an inline callback button and get a callback answer from the bot\nmessages.setBotCallbackAnswer\tSet the callback answer to a user button press (bots only)\nmessages.editInlineBotMessage\tEdit an inline bot message\nmessages.sendBotRequestedPeer\tSend one or more chosen peers, as requested by a keyboardButtonRequestPeer button.\nWorking with bots\nName\tDescription\nbots.resetBotCommands\tClear bot commands for the specified bot scope and language code\nbots.getBotCommands\tObtain a list of bot commands for the specified bot scope and language code\nbots.setBotCommands\tSet bot command list\nbots.setBotInfo\tSet localized name, about text and description of a bot (or of the current account, if called by a bot).\nbots.getBotInfo\tGet localized name, about text and description of a bot (or of the current account, if called by a bot).\nbots.getAdminedBots\tGet a list of bots owned by the current user\nWorking with bots (internal bot API use)\nName\tDescription\nbots.answerWebhookJSONQuery\tAnswers a custom query; for bots only\nbots.sendCustomRequest\tSends a custom request; for bots only\nhelp.setBotUpdatesStatus\tInforms the server about the number of pending bot updates if they haven't been processed for a long time; for bots only\nWorking with contacts and top peers\nName\tDescription\naccount.getContactSignUpNotification\tWhether the user will receive notifications when contacts sign up\naccount.setContactSignUpNotification\tToggle contact sign up notifications\ncontacts.acceptContact\tIf the add contact action bar is active, add that user as contact\ncontacts.addContact\tAdd an existing telegram user as contact.\n\nUse contacts.importContacts to add contacts by phone number, without knowing their Telegram ID.\ncontacts.block\tAdds a peer to a blocklist, see here » for more info.\ncontacts.deleteByPhones\tDelete contacts by phone number\ncontacts.deleteContacts\tDeletes several contacts from the list.\ncontacts.getBlocked\tReturns the list of blocked users.\ncontacts.getContactIDs\tGet the telegram IDs of all contacts.\nReturns an array of Telegram user IDs for all contacts (0 if a contact does not have an associated Telegram account or have hidden their account using privacy settings).\ncontacts.getContacts\tReturns the current user's contact list.\ncontacts.getLocated\tGet users and geochats near you, see here » for more info.\ncontacts.getSaved\tGet all contacts, requires a takeout session, see here » for more info.\ncontacts.getStatuses\tUse this method to obtain the online statuses of all contacts with an accessible Telegram account.\ncontacts.getTopPeers\tGet most used peers\ncontacts.importContacts\tImports contacts: saves a full list on the server, adds already registered contacts to the contact list, returns added contacts and their info.\n\nUse contacts.addContact to add Telegram contacts without actually using their phone number.\ncontacts.resetSaved\tRemoves all contacts without an associated Telegram account.\ncontacts.resetTopPeerRating\tReset rating of top peer\ncontacts.search\tReturns users found by username substring.\ncontacts.toggleTopPeers\tEnable/disable top peers\ncontacts.unblock\tDeletes a peer from a blocklist, see here » for more info.\ncontacts.setBlocked\tReplace the contents of an entire blocklist, see here for more info ».\ncontacts.editCloseFriends\tEdit the close friends list, see here » for more info.\nWorking with dialogs\nName\tDescription\nmessages.getDialogs\tReturns the current user dialog list.\nmessages.getPeerDialogs\tGet dialog info of specified peers\nmessages.getPinnedDialogs\tGet pinned dialogs\nmessages.toggleDialogPin\tPin/unpin a dialog\nmessages.reorderPinnedDialogs\tReorder pinned dialogs\nmessages.getDialogUnreadMarks\tGet dialogs manually marked as unread\nmessages.markDialogUnread\tManually mark dialog as unread\nmessages.getPeerSettings\tGet peer settings\nmessages.hidePeerSettingsBar\tShould be called after the user hides the report spam/add as contact bar of a new chat, effectively prevents the user from executing the actions specified in the action bar ».\nmessages.getOnlines\tGet count of online users in a chat\nmessages.sendScreenshotNotification\tNotify the other user in a private chat that a screenshot of the chat was taken\nmessages.setTyping\tSends a current user typing event (see SendMessageAction for all event types) to a conversation partner or group.\nmessages.setHistoryTTL\tSet maximum Time-To-Live of all messages in the specified chat\nWorking with group calls & live streaming\nName\tDescription\nphone.exportGroupCallInvite\tGet an invite link for a group call or livestream\nphone.getGroupCallJoinAs\tGet a list of peers that can be used to join a group call, presenting yourself as a specific user/channel.\nphone.editGroupCallParticipant\tEdit information about a given group call participant\n\nNote: flags.N?Bool parameters can have three possible values:\n\n- If the TL flag is not set, the previous value will not be changed.\n- If the TL flag is set and contains a boolTrue, the previous value will be overwritten to true.\n- If the TL flag is set and contains a boolFalse, the previous value will be overwritten to false.\nphone.toggleGroupCallRecord\tStart or stop recording a group call: the recorded audio and video streams will be automatically sent to Saved messages (the chat with ourselves).\nphone.editGroupCallTitle\tEdit the title of a group call or livestream\nphone.getGroupParticipants\tGet group call participants\nphone.checkGroupCall\tCheck whether the group call Server Forwarding Unit is currently receiving the streams with the specified WebRTC source IDs.\nReturns an intersection of the source IDs specified in sources, and the source IDs currently being forwarded by the SFU.\nphone.createGroupCall\tCreate a group call or livestream\nphone.toggleGroupCallStartSubscription\tSubscribe or unsubscribe to a scheduled group call\nphone.leaveGroupCall\tLeave a group call\nphone.toggleGroupCallSettings\tChange group call settings\nphone.inviteToGroupCall\tInvite a set of users to a group call.\nphone.getGroupCall\tGet info about a group call\nphone.joinGroupCall\tJoin a group call\nphone.leaveGroupCallPresentation\tStop screen sharing in a group call\nphone.discardGroupCall\tTerminate a group call\nphone.joinGroupCallPresentation\tStart screen sharing in a call\nphone.startScheduledGroupCall\tStart a scheduled group call.\nphone.saveDefaultGroupCallJoinAs\tSet the default peer that will be used to join a group call in a specific dialog.\nphone.getGroupCallStreamChannels\tGet info about RTMP streams in a group call or livestream.\nThis method should be invoked to the same group/channel-related DC used for downloading livestream chunks.\nAs usual, the media DC is preferred, if available.\nphone.getGroupCallStreamRtmpUrl\tGet RTMP URL and stream key for RTMP livestreams. Can be used even before creating the actual RTMP livestream with phone.createGroupCall (the rtmp_stream flag must be set).\nWorking with imported chats\nName\tDescription\nmessages.uploadImportedMedia\tUpload a media file associated with an imported chat, click here for more info ».\nmessages.startHistoryImport\tComplete the history import process, importing all messages into the chat.\nTo be called only after initializing the import with messages.initHistoryImport and uploading all files using messages.uploadImportedMedia.\nmessages.checkHistoryImportPeer\tCheck whether chat history exported from another chat app can be imported into a specific Telegram chat, click here for more info ».\n\nIf the check succeeds, and no RPC errors are returned, a messages.CheckedHistoryImportPeer constructor will be returned, with a confirmation text to be shown to the user, before actually initializing the import.\nmessages.checkHistoryImport\tObtains information about a chat export file, generated by a foreign chat app, click here for more info about imported chats ».\nmessages.initHistoryImport\tImport chat history from a foreign chat app into a specific Telegram chat, click here for more info about imported chats ».\nWorking with localization packs\nName\tDescription\nlangpack.getDifference\tGet new strings in language pack\nlangpack.getLangPack\tGet localization pack strings\nlangpack.getLanguage\tGet information about a language in a localization pack\nlangpack.getLanguages\tGet information about all languages in a localization pack\nlangpack.getStrings\tGet strings from a language pack\nWorking with media autodownload settings\nName\tDescription\naccount.getAutoDownloadSettings\tGet media autodownload settings\naccount.saveAutoDownloadSettings\tChange media autodownload settings\nWorking with media autosave settings\nName\tDescription\naccount.getAutoSaveSettings\tGet autosave settings\naccount.saveAutoSaveSettings\tModify autosave settings\naccount.deleteAutoSaveExceptions\tClear all peer-specific autosave settings.\nWorking with message threads\nName\tDescription\nmessages.getReplies\tGet messages in a reply thread\ncontacts.blockFromReplies\tStop getting notifications about discussion replies of a certain user in @replies\nmessages.getDiscussionMessage\tGet discussion message from the associated discussion group of a channel to show it on top of the comment section, without actually joining the group\nmessages.readDiscussion\tMark a thread as read\nWorking with messages\nName\tDescription\nmessages.deleteHistory\tDeletes communication history.\nmessages.deleteMessages\tDeletes messages by their identifiers.\nmessages.editMessage\tEdit message\nmessages.forwardMessages\tForwards messages by their IDs.\nmessages.getHistory\tReturns the conversation history with one interlocutor / within a chat\nmessages.getSearchResultsPositions\tReturns sparse positions of messages of the specified type in the chat to be used for shared media scroll implementation.\n\nReturns the results in reverse chronological order (i.e., in order of decreasing message_id).\nmessages.getMessageEditData\tFind out if a media message's caption can be edited\nmessages.getOutboxReadDate\tGet the exact read date of one of our messages, sent to a private chat with another user.\n\nCan be only done for private outgoing messages not older than appConfig.pm_read_date_expire_period ».\n\nIf the peer's userFull.read_dates_private flag is set, we will not be able to fetch the exact read date of messages we send to them, and a USER_PRIVACY_RESTRICTED RPC error will be emitted.\nThe exact read date of messages might still be unavailable for other reasons, see here » for more info.\nTo set userFull.read_dates_private for ourselves invoke account.setGlobalPrivacySettings, setting the settings.hide_read_marks flag.\nmessages.getMessages\tReturns the list of messages by their IDs.\nmessages.getMessagesViews\tGet and increase the view counter of a message sent or forwarded from a channel\nmessages.getRecentLocations\tGet live location history of a certain user\nmessages.getSearchCounters\tGet the number of results that would be found by a messages.search call with the same parameters\nmessages.getUnreadMentions\tGet unread messages where we were mentioned\nmessages.readHistory\tMarks message history as read.\nmessages.readMentions\tMark mentions as read\nmessages.readMessageContents\tNotifies the sender about the recipient having listened a voice message or watched a video.\nmessages.receivedMessages\tConfirms receipt of messages by a client, cancels PUSH-notification sending.\nmessages.search\tSearch for messages.\nmessages.getSearchResultsCalendar\tReturns information about the next messages of the specified type in the chat split by days.\n\nReturns the results in reverse chronological order.\nCan return partial results for the last returned day.\nmessages.searchGlobal\tSearch for messages and peers globally\nmessages.searchSentMedia\tView and search recently sent media.\nThis method does not support pagination.\nchannels.searchPosts\tGlobally search for posts from public channels » (including those we aren't a member of) containing a specific hashtag.\nmessages.sendMedia\tSend a media\nmessages.sendMessage\tSends a message to a chat\nmessages.sendMultiMedia\tSend an album or grouped media\nmessages.updatePinnedMessage\tPin a message\nmessages.unpinAllMessages\tUnpin all pinned messages\nmessages.toggleNoForwards\tEnable or disable content protection on a channel or chat\nmessages.saveDefaultSendAs\tChange the default peer that should be used when sending messages, reactions, poll votes to a specific group\nchannels.getSendAs\tObtains a list of peers that can be used to send messages in a specific group\nWorking with notification settings\nName\tDescription\naccount.registerDevice\tRegister device to receive PUSH notifications\naccount.unregisterDevice\tDeletes a device by its token, stops sending PUSH-notifications to it.\naccount.updateDeviceLocked\tWhen client-side passcode lock feature is enabled, will not show message texts in incoming PUSH notifications.\naccount.getNotifyExceptions\tReturns list of chats with non-default notification settings\naccount.getNotifySettings\tGets current notification settings for a given user/group, from all users/all groups.\naccount.updateNotifySettings\tEdits notification settings from a given user/group, from all users/all groups.\naccount.resetNotifySettings\tResets all notification settings from users and groups.\nWorking with notification sounds\nName\tDescription\naccount.getSavedRingtones\tFetch saved notification sounds\naccount.saveRingtone\tSave or remove saved notification sound.\n\nIf the notification sound is already in MP3 format, account.savedRingtone will be returned.\nOtherwise, it will be automatically converted and a account.savedRingtoneConverted will be returned, containing a new document object that should be used to refer to the ringtone from now on (ie when deleting it using the unsave parameter, or when downloading it).\naccount.uploadRingtone\tUpload notification sound, use account.saveRingtone to convert it and add it to the list of saved notification sounds.\nWorking with other users\nName\tDescription\nusers.getFullUser\tReturns extended user info by ID.\nusers.getUsers\tReturns basic user info according to their identifiers.\ncontacts.resolvePhone\tResolve a phone number to get user info, if their privacy settings allow it.\nWorking with payments\nName\tDescription\npayments.getSavedInfo\tGet saved payment information\npayments.clearSavedInfo\tClear saved payment information\npayments.getPaymentForm\tGet a payment form\npayments.validateRequestedInfo\tSubmit requested order information for validation\nmessages.setBotShippingResults\tIf you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the bot will receive an updateBotShippingQuery update. Use this method to reply to shipping queries.\naccount.getTmpPassword\tGet temporary payment password\npayments.sendPaymentForm\tSend compiled payment form\nmessages.setBotPrecheckoutResults\tOnce the user has confirmed their payment and shipping details, the bot receives an updateBotPrecheckoutQuery update.\nUse this method to respond to such pre-checkout queries.\nNote: Telegram must receive an answer within 10 seconds after the pre-checkout query was sent.\npayments.getPaymentReceipt\tGet payment receipt\npayments.exportInvoice\tGenerate an invoice deep link\npayments.getBankCardData\tGet info about a credit card\nWorking with polls\nName\tDescription\nmessages.getPollResults\tGet poll results\nmessages.getPollVotes\tGet poll results for non-anonymous polls\nmessages.sendVote\tVote in a poll\n\nStarting from layer 159, the vote will be sent from the peer specified using messages.saveDefaultSendAs.\nWorking with scheduled messages\nName\tDescription\nmessages.sendScheduledMessages\tSend scheduled messages right away\nmessages.getScheduledHistory\tGet scheduled messages\nmessages.deleteScheduledMessages\tDelete scheduled messages\nmessages.getScheduledMessages\tGet scheduled messages\nWorking with sensitive content (NSFW)\nName\tDescription\naccount.getContentSettings\tGet sensitive content settings\naccount.setContentSettings\tSet sensitive content settings (for viewing or hiding NSFW content)\nWorking with sponsored messages\nName\tDescription\nchannels.restrictSponsoredMessages\tDisable ads on the specified channel, for all users.\n\nAvailable only after reaching at least the boost level » specified in the channel_restrict_sponsored_level_min » config parameter.\naccount.toggleSponsoredMessages\tDisable or re-enable Telegram ads for the current Premium account.\n\nUseful for business owners that may want to launch and view their own Telegram ads via the Telegram ad platform ».\nmessages.viewSponsoredMessage\tMark a specific sponsored message » as read\nmessages.clickSponsoredMessage\tInforms the server that the user has interacted with a sponsored message in one of the ways listed here ».\nmessages.reportSponsoredMessage\tReport a sponsored message », see here » for more info on the full flow.\nmessages.getSponsoredMessages\tGet a list of sponsored messages for a peer, see here » for more info.\nWorking with the Telegram Business intro »\nName\tDescription\naccount.updateBusinessIntro\tSet or remove the Telegram Business introduction ».\nWorking with the Telegram Business location\nName\tDescription\naccount.updateBusinessLocation\tBusinesses » may advertise their location using this method, see here » for more info.\n\nTo remove business location information invoke the method without setting any of the parameters.\nWorking with the attachment menu » of mini bot apps »\nName\tDescription\nmessages.getAttachMenuBots\tReturns installed attachment menu bot mini apps »\nmessages.getAttachMenuBot\tReturns attachment menu entry for a bot mini app that can be launched from the attachment menu »\nmessages.toggleBotInAttachMenu\tEnable or disable web bot attachment menu »\nWorking with the channel ad revenue\nName\tDescription\nstats.getBroadcastRevenueStats\tGet channel ad revenue statistics ».\nstats.getBroadcastRevenueWithdrawalUrl\tWithdraw funds from a channel's ad revenue balance ».\nstats.getBroadcastRevenueTransactions\tFetch channel ad revenue transaction history ».\nWorking with the native anti-spam system\nName\tDescription\nchannels.toggleAntiSpam\tEnable or disable the native antispam system.\nchannels.reportAntiSpamFalsePositive\tReport a native antispam false positive\nWorking with the privacy settings\nName\tDescription\naccount.getPrivacy\tGet privacy settings of current account\naccount.setPrivacy\tChange privacy settings of current account\naccount.setGlobalPrivacySettings\tSet global privacy settings\naccount.getGlobalPrivacySettings\tGet global privacy settings\nusers.getIsPremiumRequiredToContact\tCheck whether we can write to the specified user (this method can only be called by non-Premium users), see here » for more info on the full flow.\nmessages.setDefaultHistoryTTL\tChanges the default value of the Time-To-Live setting, applied to all new chats.\nmessages.getDefaultHistoryTTL\tGets the default value of the Time-To-Live setting, applied to all new chats.\nWorking with the takeout API, see here » for more info.\nName\tDescription\naccount.initTakeoutSession\tInitialize a takeout session, see here » for more info.\naccount.finishTakeoutSession\tTerminate a takeout session, see here » for more info.\nmessages.getSplitRanges\tGet message ranges for saving the user's chat history\nchannels.getLeftChannels\tGet a list of channels/supergroups we left, requires a takeout session, see here » for more info.\ninvokeWithMessagesRange\tInvoke with the given message range\ninvokeWithTakeout\tInvoke a method within a takeout session, see here » for more info.\nWorking with the user profile\nName\tDescription\nphotos.deletePhotos\tDeletes profile photos. The method returns a list of successfully deleted photo IDs.\nphotos.getUserPhotos\tReturns the list of user photos.\nphotos.updateProfilePhoto\tInstalls a previously uploaded photo as a profile photo.\nphotos.uploadProfilePhoto\tUpdates current user profile photo.\n\nThe file, video and video_emoji_markup flags are mutually exclusive.\nphotos.uploadContactProfilePhoto\tUpload a custom profile picture for a contact, or suggest a new profile picture to a contact.\n\nThe file, video and video_emoji_markup flags are mutually exclusive.\naccount.updateProfile\tUpdates user profile.\naccount.updateBirthday\tUpdate our birthday, see here » for more info.\ncontacts.getBirthdays\tFetch all users with birthdays that fall within +1/-1 days, relative to the current day: this method should be invoked by clients every 6-8 hours, and if the result is non-empty, it should be used to appropriately update locally cached birthday information in user.birthday.\n\nSee here » for more info.\naccount.updatePersonalChannel\tAssociate (or remove) a personal channel », that will be listed on our personal profile page ».\n\nChanging it will emit an updateUser update.\naccount.updateStatus\tUpdates online user status.\nWorking with the bot menu button »\nName\tDescription\nbots.setBotMenuButton\tSets the menu button action » for a given user or for all users\nbots.getBotMenuButton\tGets the menu button action for a given user or for all users, previously set using bots.setBotMenuButton; users can see this information in the botInfo constructor.\nWorking with the user's account\nName\tDescription\naccount.changePhone\tChange the phone number of the current account\naccount.confirmPhone\tConfirm a phone number to cancel account deletion, for more info click here »\naccount.deleteAccount\tDelete the user's account from the telegram servers.\n\nCan also be used to delete the account of a user that provided the login code, but forgot the 2FA password and no recovery method is configured, see here » for more info on password recovery, and here » for more info on account deletion.\naccount.getAccountTTL\tGet days to live of account\naccount.resetAuthorization\tLog out an active authorized session by its hash\naccount.sendChangePhoneCode\tVerify a new phone number to associate to the current account\naccount.sendConfirmPhoneCode\tSend confirmation code to cancel account deletion, for more info click here »\naccount.setAccountTTL\tSet account self-destruction period\nWorking with timezones\nName\tDescription\nhelp.getTimezonesList\tReturns timezone information that may be used elsewhere in the API, such as to set Telegram Business opening hours ».\nWorking with usernames\nName\tDescription\nchannels.checkUsername\tCheck if a username is free and can be assigned to a channel/supergroup\nchannels.updateUsername\tChange or remove the username of a supergroup/channel\naccount.updateUsername\tChanges username for the current user.\naccount.checkUsername\tValidates a username and checks availability.\ncontacts.resolveUsername\tResolve a @username to get peer info\nABOUT\nBLOG\nPRESS\nMODERATION\nGo up",
  "updatedAt": "2025-05-05T14:18:56.874Z"
}