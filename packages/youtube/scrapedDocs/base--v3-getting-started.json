{
  "url": "https://developers.google.com/youtube/v3/getting-started",
  "content": "Skip to main content\nYouTube\nSign in\nYouTube\nHome\nGuides\nReference\nSamples\nSupport\nOverview\nClient Libraries\nAuthorize Requests\nOverview\nGet Auth Credentials\nServer-side Web Apps\nClient-side Web Apps\nInstalled Apps\nDevices\nQuickstarts\nAndroid\nApps Script\nGo\niOS\nJava\nJavaScript\nNode.js\nPHP\nPython\nRuby\nGuides and Tutorials\nQuota costs for API requests\nQuota and Compliance Audits\nUpload a Video\nSend Resumable Uploads\nFind MadeForKids video status\nSubscribe to Push Notifications\nWork with Channel IDs\nMove from ClientLogin to OAuth\nSample Requests\nImplementation Guide\nOverview\nActivities\nCaptions\nChannels\nComments\nPagination\nPartial responses\nPlaylists\nRatings\nSearch requests\nSubscriptions\nVideos\nTools\nAPIs Explorer\nWe are updating the Data API to match how YouTube counts views for Shorts. Learn more\nHome\nProducts\nYouTube\nData API\nGuides\nWas this helpful?\nYouTube Data API Overview \nbookmark_border\nOn this page\nIntroduction\nBefore you start\nResources and resource types\nSupported operations\nQuota usage\nCalculating quota usage\nPartial resources\nHow to use the part parameter\nIntroduction\n\nThis document is intended for developers who want to write applications that interact with YouTube. It explains basic concepts of YouTube and of the API itself. It also provides an overview of the different functions that the API supports.\n\nBefore you start\n\nYou need a Google Account to access the Google API Console, request an API key, and register your application.\n\nCreate a project in the Google Developers Console and obtain authorization credentials so your application can submit API requests.\n\nAfter creating your project, make sure the YouTube Data API is one of the services that your application is registered to use:\n\nGo to the API Console and select the project that you just registered.\nVisit the Enabled APIs page. In the list of APIs, make sure the status is ON for the YouTube Data API v3.\n\nIf your application will use any API methods that require user authorization, read the authentication guide to learn how to implement OAuth 2.0 authorization.\n\nSelect a client library to simplify your API implementation.\n\nFamiliarize yourself with the core concepts of the JSON (JavaScript Object Notation) data format. JSON is a common, language-independent data format that provides a simple text representation of arbitrary data structures. For more information, see json.org.\n\nResources and resource types\n\nA resource is an individual data entity with a unique identifier. The table below describes the different types of resources that you can interact with using the API.\n\nResources\nactivity\nContains information about an action that a particular user has taken on the YouTube site. User actions that are reported in activity feeds include rating a video, sharing a video, marking a video as a favorite, and posting a channel bulletin, among others.\nchannel\nContains information about a single YouTube channel.\nchannelBanner\nIdentifies the URL to use to set a newly uploaded image as the banner image for a channel.\nchannelSection\nContains information about a set of videos that a channel has chosen to feature. For example, a section could feature a channel's latest uploads, most popular uploads, or videos from one or more playlists.\nguideCategory\nIdentifies a category that YouTube associates with channels based on their content or other indicators, such as popularity. Guide categories seek to organize channels in a way that makes it easier for YouTube users to find the content they're looking for. While channels could be associated with one or more guide categories, they are not guaranteed to be in any guide categories.\ni18nLanguage\nIdentifies an application language that the YouTube website supports. The application language can also be referred to as a UI language.\ni18nRegion\nIdentifies a geographic area that a YouTube user can select as the preferred content region. The content region can also be referred to as a content locale.\nplaylist\nRepresents a single YouTube playlist. A playlist is a collection of videos that can be viewed sequentially and shared with other users.\nplaylistItem\nIdentifies a resource, such as a video, that is part of a playlist. The playlistItem resource also contains details that explain how the included resource is used in the playlist.\nsearch result\nContains information about a YouTube video, channel, or playlist that matches the search parameters specified in an API request. While a search result points to a uniquely identifiable resource, like a video, it does not have its own persistent data.\nsubscription\nContains information about a YouTube user subscription. A subscription notifies a user when new videos are added to a channel or when another user takes one of several actions on YouTube, such as uploading a video, rating a video, or commenting on a video.\nthumbnail\nIdentifies thumbnail images associated with a resource.\nvideo\nRepresents a single YouTube video.\nvideoCategory\nIdentifies a category that has been or could be associated with uploaded videos.\nwatermark\nIdentifies an image that displays during playbacks of a specified channel's videos. The channel owner can also specify a target channel to which the image links as well as timing details that determine when the watermark appears during video playbacks and then length of time it is visible.\n\nNote that, in many cases, a resource contains references to other resources. For example, a playlistItem resource's snippet.resourceId.videoId property identifies a video resource that, in turn, contains complete information about the video. As another example, a search result contains either a videoId, playlistId, or channelId property that identifies a particular video, playlist, or channel resource.\n\nSupported operations\n\nThe following table shows the most common methods that the API supports. Some resources also support other methods that perform functions more specific to those resources. For example, the videos.rate method associates a user rating with a video, and the thumbnails.set method uploads a video thumbnail image to YouTube and associates it with a video.\n\nOperations\nlist\nRetrieves (GET) a list of zero or more resources.\ninsert\nCreates (POST) a new resource.\nupdate\nModifies (PUT) an existing resource to reflect data in your request.\ndelete\nRemoves (DELETE) a specific resource.\n\nThe API currently supports methods to list each of the supported resource types, and it supports write operations for many resources as well.\n\nThe table below identifies the operations that are supported for different types of resources. Operations that insert, update, or delete resources always require user authorization. In some cases, list methods support both authorized and unauthorized requests, where unauthorized requests only retrieve public data while authorized requests can also retrieve information about or private to the currently authenticated user.\n\nSupported Operations\n\tlist\tinsert\tupdate\tdelete\nactivity\t\t\t\t\ncaption\t\t\t\t\nchannel\t\t\t\t\nchannelBanner\t\t\t\t\nchannelSection\t\t\t\t\ncomment\t\t\t\t\ncommentThread\t\t\t\t\nguideCategory\t\t\t\t\ni18nLanguage\t\t\t\t\ni18nRegion\t\t\t\t\nplaylist\t\t\t\t\nplaylistItem\t\t\t\t\nsearch result\t\t\t\t\nsubscription\t\t\t\t\nthumbnail\t\t\t\t\nvideo\t\t\t\t\nvideoCategory\t\t\t\t\nwatermark\t\t\t\t\nQuota usage\n\nThe YouTube Data API uses a quota to ensure that developers use the service as intended and do not create applications that unfairly reduce service quality or limit access for others. All API requests, including invalid requests, incur at least a one-point quota cost. You can find the quota available to your application in the API Console.\n\nProjects that enable the YouTube Data API have a default quota allocation of 10,000 units per day, an amount sufficient for the overwhelming majority of our API users. Default quota, which is subject to change, helps us optimize quota allocations and scale our infrastructure in a way that is more meaningful to our API users. You can see your quota usage on the Quotas page in the API Console.\n\nNote: If you reach the quota limit, you can request additional quota by completing the Quota extension request form for YouTube API Services.\n\nCalculating quota usage\n\nGoogle calculates your quota usage by assigning a cost to each request. Different types of operations have different quota costs. For example:\n\nA read operation that retrieves a list of resources -- channels, videos, playlists -- usually costs 1 unit.\nA write operation that creates, updates, or deletes a resource usually has costs 50 units.\nA search request costs 100 units.\nA video upload costs 1600 units.\n\nThe Quota costs for API requests table shows the quota cost of each API method. With these rules in mind, you can estimate the number of requests that your application could send per day without exceeding your quota.\n\nPartial resources\n\nThe API allows, and actually requires, the retrieval of partial resources so that applications avoid transferring, parsing, and storing unneeded data. This approach also ensures that the API uses network, CPU, and memory resources more efficiently.\n\nThe API supports two request parameters, which are explained in the following sections, that enable you to identify the resource properties that should be included in API responses.\n\nThe part parameter identifies groups of properties that should be returned for a resource.\nThe fields parameter filters the API response to only return specific properties within the requested resource parts.\n\nHow to use the part parameter\n\nThe part parameter is a required parameter for any API request that retrieves or returns a resource. The parameter identifies one or more top-level (non-nested) resource properties that should be included in an API response. For example, a video resource has the following parts:\n\nsnippet\ncontentDetails\nfileDetails\nplayer\nprocessingDetails\nrecordingDetails\nstatistics\nstatus\nsuggestions\ntopicDetails\n\nAll of these parts are objects that contain nested properties, and you can think of these objects as groups of metadata fields that the API server might (or might not) retrieve. As such, the part parameter requires you to select the resource components that your application actually uses. This requirement serves two key purposes:\n\nIt reduces latency by preventing the API server from spending time retrieving metadata fields that your application doesn't use.\nIt reduces bandwidth usage by reducing (or eliminating) the amount of unnecessary data that your application might retrieve.\n\nOver time, as resources add more parts, these benefits will only increase since your application will not be requesting newly introduced properties that it doesn't support.\n\nHow to use the fields parameter\n\nThe fields parameter filters the API response, which only contains the resource parts identified in the part parameter value, so that the response only includes a specific set of fields. The fields parameter lets you remove nested properties from an API response and thereby further reduce your bandwidth usage. (The part parameter cannot be used to filter nested properties from a response.)\n\nThe following rules explain the supported syntax for the fields parameter value, which is loosely based on XPath syntax:\n\nUse a comma-separated list (fields=a,b) to select multiple fields.\nUse an asterisk (fields=*) as a wildcard to identify all fields.\nUse parentheses (fields=a(b,c)) to specify a group of nested properties that will be included in the API response.\nUse a forward slash (fields=a/b) to identify a nested property.\n\nIn practice, these rules often allow several different fields parameter values to retrieve the same API response. For example, if you want to retrieve the playlist item ID, title, and position for every item in a playlist, you could use any of the following values:\n\nfields=items/id,playlistItems/snippet/title,playlistItems/snippet/position\nfields=items(id,snippet/title,snippet/position)\nfields=items(id,snippet(title,position))\n\nNote: As with all query parameter values, the fields parameter value must be URL encoded. For better readability, the examples in this document omit the encoding.\n\nSample partial requests\n\nThe examples below demonstrate how you can use the part and fields parameters to ensure that API responses only include the data that your application uses:\n\nExample 1 returns a video resource that includes four parts as well as kind and etag properties.\nExample 2 returns a video resource that includes two parts as well as kind and etag properties.\nExample 3 returns a video resource that includes two parts but excludes kind and etag properties.\nExample 4 returns a video resource that includes two parts but excludes kind and etag as well as some nested properties in the resource's snippet object.\nExample 1\nExample 2\nExample 3\nExample 4\nURL: https://www.googleapis.com/youtube/v3/videos?id=7lCDEYXw3mM&key=YOUR_API_KEY\n     &part=snippet,contentDetails,statistics,status\n\nDescription: This example retrieves a video resource and identifies several\n             resource parts that should be included in the API response.\n\nAPI response:\n\n\n{ \n \"kind\": \"youtube#videoListResponse\",\n \"etag\": \"\\\"UCBpFjp2h75_b92t44sqraUcyu0/sDAlsG9NGKfr6v5AlPZKSEZdtqA\\\"\",\n \"videos\": [\n  {\n   \"id\": \"7lCDEYXw3mM\",\n   \"kind\": \"youtube#video\",\n   \"etag\": \"\\\"UCBpFjp2h75_b92t44sqraUcyu0/iYynQR8AtacsFUwWmrVaw4Smb_Q\\\"\",\n   \"snippet\": { \n    \"publishedAt\": \"2012-06-20T22:45:24.000Z\",\n    \"channelId\": \"UC_x5XG1OV2P6uZZ5FSM9Ttw\",\n    \"title\": \"Google I/O 101: Q&A On Using Google APIs\",\n    \"description\": \"Antonio Fuentes speaks to us and takes questions on working with Google APIs and OAuth 2.0.\",\n    \"thumbnails\": {\n     \"default\": {\n      \"url\": \"https://i.ytimg.com/vi/7lCDEYXw3mM/default.jpg\"\n     },\n     \"medium\": {\n      \"url\": \"https://i.ytimg.com/vi/7lCDEYXw3mM/mqdefault.jpg\"\n     },\n     \"high\": {\n      \"url\": \"https://i.ytimg.com/vi/7lCDEYXw3mM/hqdefault.jpg\"\n     }\n    },\n    \"categoryId\": \"28\"\n   },\n   \"contentDetails\": {\n    \"duration\": \"PT15M51S\",\n    \"aspectRatio\": \"RATIO_16_9\"\n   },\n   \"statistics\": {\n    \"viewCount\": \"3057\",\n    \"likeCount\": \"25\",\n    \"dislikeCount\": \"0\",\n    \"favoriteCount\": \"17\",\n    \"commentCount\": \"12\"\n   },\n   \"status\": {\n    \"uploadStatus\": \"STATUS_PROCESSED\",\n    \"privacyStatus\": \"PRIVACY_PUBLIC\"\n   }\n  }\n ]\n}\nOptimizing performance\nUsing ETags\n\nETags, a standard part of the HTTP protocol, allow applications to refer to a specific version of a particular API resource. The resource could be an entire feed or an item in that feed. This functionality supports the following use cases:\n\nCaching and conditional retrieval – Your application can cache API resources and their ETags. Then, when your application requests a stored resource again, it specifies the ETag associated with that resource. If the resource has changed, the API returns the modified resource and the ETag associated with that version of the resource. If the resource has not changed, the API returns an HTTP 304 response (Not Modified), which indicates that the resource has not changed. Your application can reduce latency and bandwidth usage by serving cached resources in this manner.\n\nThe client libraries for Google APIs differ in their support of ETags. For example, the JavaScript client library supports ETags via a whitelist for allowed request headers that includes If-Match and If-None-Match. The whitelist allows normal browser caching to occur so that if a resource's ETag has not changed, the resource can be served from the browser cache. The Obj-C client, on the other hand, does not support ETags.\n\nProtecting against inadvertent overwrites of changes – ETags help to ensure that multiple API clients don't inadvertently overwrite each other's changes. When updating or deleting a resource, your application can specify the resource's ETag. If the ETag doesn't match the most recent version of that resource, then the API request fails.\n\nUsing ETags in your application provides several benefits:\n\nThe API responds more quickly to requests for cached but unchanged resources, yielding lower latency and lower bandwidth usage.\nYour application will not inadvertently overwrite changes to a resource that were made from another API client.\n\nThe Google APIs Client Library for JavaScript supports If-Match and If-None-Match HTTP request headers, thereby enabling ETags to work within the context of normal browser caching.\n\nUsing gzip\n\nYou can also reduce the bandwidth needed for each API response by enabling gzip compression. While your application will need additional CPU time to uncompress API responses, the benefit of consuming fewer network resources usually outweighs that cost.\n\nTo receive a gzip-encoded response you must do two things:\n\nSet the Accept-Encoding HTTP request header to gzip.\nModify your user agent to contain the string gzip.\n\nThe sample HTTP headers below demonstrate these requirements for enabling gzip compression:\n\nAccept-Encoding: gzip\nUser-Agent: my program (gzip)\n\nWas this helpful?\n\nExcept as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2025-03-31 UTC.\n\nBlog\nGitHub\nIssue Tracker\nStack Overflow\nVideos\nTools\nGoogle APIs Explorer\nYouTube Player Demo\nConfigure a Subscribe Button\nIssue Tracker\nFile a bug\nRequest a feature\nSee open issues\nProduct Info\nTerms of Service\nBranding Guidelines\nMonetization Guidelines\nAPIs subject to Deprecation Policy\nAndroid\nChrome\nFirebase\nGoogle Cloud Platform\nGoogle AI\nAll products\nTerms\nPrivacy\nSign up for the Google for Developers newsletter\nSubscribe",
  "updatedAt": "2025-05-05T20:36:10.613Z"
}