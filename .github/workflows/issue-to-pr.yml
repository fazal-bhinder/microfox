name: Issue to PR

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write # To create branches, commit files
  pull-requests: write # To create PRs
  issues: write # To write issue data

jobs:
  initial_comment:
    runs-on: ubuntu-latest
    steps:
      - name: Add initial comment
        uses: actions/github-script@v7
        with:
          script: |
            const issueTitle = context.payload.issue.title;
            if (issueTitle.includes('packagefox:')) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: 'ðŸ‘‹ Thank you for your contribution! This issue needs to be approved by a maintainer before proceeding. A maintainer can approve this issue by commenting `/approve` on this issue.'
              });
            }

  process_issue:
    needs: initial_comment
    if: |
      contains(github.event.issue.title, 'packagefox:') && 
      needs.initial_comment.outputs.is_maintainer == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        # Checkout the default branch to get the latest .microfox/packagefox-build.json

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your preferred Node.js version
          cache: 'npm'
          cache-dependency-path: scripts/package-lock.json # Adjust if using yarn or different lock file

      - name: Install Script Dependencies
        run: cd scripts && npm install

      - name: Run Issue Processing Script
        id: issue_data
        run: cd scripts && npm run process-issue
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          # Pass GITHUB_TOKEN if script needs to interact with GitHub API further
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare packagefox-build.json
        id: prepare_file
        run: |
          set -e # Exit on error
          mkdir -p .microfox
          # Get existing content from checked-out branch, default to '{"requests":[]}'
          EXISTING_JSON=$(cat .microfox/packagefox-build.json 2>/dev/null || echo '{"requests":[]}')
          # Get the new request payload generated by the script
          NEW_REQUEST_PAYLOAD='${{ steps.issue_data.outputs.json_payload }}'

          # Ensure jq is available
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Validate and merge the new payload into the 'requests' array
          # Handles cases where file exists but isn't valid JSON or doesn't have 'requests' array
          echo "Existing JSON: $EXISTING_JSON"
          echo "New Payload: $NEW_REQUEST_PAYLOAD"
          UPDATED_JSON=$(echo "$EXISTING_JSON" | jq --argjson payload "$NEW_REQUEST_PAYLOAD" '
            if type == "object" and has("requests") and (.requests | type == "array") then
              .requests += [$payload]
            else
              # Handle case where file exists but is empty/invalid or has no requests array
              {"requests": [$payload]}
            end
          ' || echo "{"requests": [$NEW_REQUEST_PAYLOAD]}") # Fallback if jq fails

          echo "Updated JSON: $UPDATED_JSON"
          # Write the updated JSON back to the file
          echo "$UPDATED_JSON" | jq '.' > .microfox/packagefox-build.json # Pretty print with jq '.'
          echo "File .microfox/packagefox-build.json prepared successfully."
        shell: bash

      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PACKAGEFOX_APP_ID }}
          private_key: ${{ secrets.PACKAGEFOX_PRIVATE_KEY }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.generate_token.outputs.token }} # Use the generated App token
          commit-message: ${{ steps.issue_data.outputs.commit_message }}
          branch: ${{ steps.issue_data.outputs.branch_name }}
          delete-branch: true
          title: ${{ steps.issue_data.outputs.pr_title }}
          body: ${{ steps.issue_data.outputs.pr_body }} # Assumes script includes 'Closes #<issue_number>'
          add-paths: .microfox/packagefox-build.json # Stage the changes in this file
          # base: main # Specify base branch if not the default checkout branch
          labels: |
            automated-pr
            from-issues
          assignees: ${{ github.actor }}
          # Optional: Add reviewers
          # reviewers: user1,user2
